{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"The Notebook Here is where I have decided to consolidate all of my notes on different topics in tech for easy access from anywhere without having to deal with different accounts, passwords, and 2FA. Feel free to look around but these notes were written mostly to help me better learn and remember different topics and were not written as an expert in any of the areas so mistakes are possible.","title":"The Notebook"},{"location":"#the-notebook","text":"Here is where I have decided to consolidate all of my notes on different topics in tech for easy access from anywhere without having to deal with different accounts, passwords, and 2FA. Feel free to look around but these notes were written mostly to help me better learn and remember different topics and were not written as an expert in any of the areas so mistakes are possible.","title":"The Notebook"},{"location":"basics/macos/","text":"MacOS Overview Executable PATH PATH is an environment variable that contains a colon-seperated list of directories where your shell will look for executables that are called by name on the command line without an explicit path to them Ex: /usr/bin:/bin:/home/bin Any executable called by name will be searched for in these directories in the order from left to right if an executable exists in 2 directories, the one that is found first is executed If no executable is found in any of the directories on the path, the shell will not execute the command and will throw a command not recognized error /etc/paths sets the PATH system wide for all users (macOS specific) .~/zsh_profile sets per-user preferences ( ~ is the user's home directory) PATH , $PATH , and ${PATH} all reference the same variable just in different contexts PATH is for setting the variable (e.g. PATH=/usr/bin ) $ denotes an environment variable variable names are case sensitive so PATH is different than Path Bash/zsh Profile vs RC: .bash_profile is executed for login shells (e.g. logging into machine via console or via ssh) .bashrc is executed for interactive non-login shells (e.g. already logged in and open a new terminal window) Also run when starting a new bash instance by typing /bin/bash such as the shebang at the top of some python scripts In OSX, terminal runs a login shell every time by default unlike other operating systems Filesystem Does not follow the Filesystem Hierarchy Standard that Linux operating systems do so there are some similarities and differences / is the root of the MacOS filesystem /System/Library/Kernels : Contains the OS kernel (replaces /boot folder in FHS) /Users : replaces the /home folder in FHS /var/root/ : replaces the /root folder in FHS /usr contains user installed utilities and apps user commands: /usr/bin for normal users /usr/sbin for admin users shared libraries: /usr/lib Man pages (manual page- software documentation) /usr/share/man executables that shouldn't directly be run by users /usr/libexec a subdirectory to place programs, libraries, and other files that don't come with the base OS /usr/local /dev contains device files /etc contains system configuration files and scripts /etc/paths contains a list of paths used by path_helper to build and set the PATH to search for commands along /bin contians executables to provide essential user utilities (e.g common command line commands like ls or pwd or cd) man hier : / root directory of the filesystem /bin/ user utilities fundamental to both single-user and multi-user environments /dev/ block and character device files /etc/ system configuration files and scripts /mach_kernel kernel executable (the operating system loaded into memory at boot time). /sbin/ system programs and administration utilities fundamental to both single-user and multi- user environments /tmp/ temporary files /usr/ contains the majority of user utilities and applications bin/ common utilities, programming tools, and apps include/ standard C include files arpa/ C include files for Internet service protocols hfs/ C include files for HFS machine/ machine specific C include files net/ misc network C include files netinet/ C include files for Internet standard protocols; see inet(4) nfs/ C include files for NFS (Network File System) objc/ C include files for Objective-C protocols/ C include files for Berkeley service protocols sys/ system C include files (kernel data structures) ufs/ C include files for UFS lib/ archive libraries libexec/ system daemons & system utilities (executed by other programs) local/ executables, libraries, etc. not included by the basic OS sbin/ system daemons & system utilities (executed by users) share/ architecture-independent data files calendar/ a variety of pre-fab calendar files dict/ word lists man/ manual pages misc/ misc system-wide ascii text files mk/ templates for make skel/ example . (dot) files for new accounts tabset/ tab description files zoneinfo/ timezone configuration information /var/ multi-purpose log, temporary, transient, and spool files at/ timed command scheduling files; see at(1) backups/ misc. backup files db/ misc. automatically generated system-specific database files log/ misc. system log files mail/ user mailbox files run/ system information files describing various info about system since it was booted rwho/ rwho data files spool/ misc. printer and mail system spooling directories tmp/ temporary files that are kept between system reboots folders/ per-user temporary files and caches Useful Commands man cmd will display the manual page for the terminal command (useful for getting the flag descriptions for commands like ls ) | pipe operator is great for doing additional commands to the output of the first command echo \"source /opt/ros/foxy/setup.zsh\" >> .zshrc is useful for adding things to the .zshrc without opening it up in an editor which python3 is usefull for figuring out where commands/executables are installed on the PATH compaudit | xargs chmod g-w basically runs an audit for insecure directories (usually related to read-write permissions) and removes any write permissions that should not be on directories ( Source ) needed to use this to fix a compaudit warning when sourcing ros2-foxy-base Resources MacOS Filesystem PATH Explanation Bash Profile vs RC Homebrew symlinks in /usr/local/opt to /usr/local/Cellar","title":"MacOS"},{"location":"basics/macos/#macos-overview","text":"","title":"MacOS Overview"},{"location":"basics/macos/#executable-path","text":"PATH is an environment variable that contains a colon-seperated list of directories where your shell will look for executables that are called by name on the command line without an explicit path to them Ex: /usr/bin:/bin:/home/bin Any executable called by name will be searched for in these directories in the order from left to right if an executable exists in 2 directories, the one that is found first is executed If no executable is found in any of the directories on the path, the shell will not execute the command and will throw a command not recognized error /etc/paths sets the PATH system wide for all users (macOS specific) .~/zsh_profile sets per-user preferences ( ~ is the user's home directory) PATH , $PATH , and ${PATH} all reference the same variable just in different contexts PATH is for setting the variable (e.g. PATH=/usr/bin ) $ denotes an environment variable variable names are case sensitive so PATH is different than Path","title":"Executable PATH"},{"location":"basics/macos/#bashzsh-profile-vs-rc","text":".bash_profile is executed for login shells (e.g. logging into machine via console or via ssh) .bashrc is executed for interactive non-login shells (e.g. already logged in and open a new terminal window) Also run when starting a new bash instance by typing /bin/bash such as the shebang at the top of some python scripts In OSX, terminal runs a login shell every time by default unlike other operating systems","title":"Bash/zsh Profile vs RC:"},{"location":"basics/macos/#filesystem","text":"Does not follow the Filesystem Hierarchy Standard that Linux operating systems do so there are some similarities and differences / is the root of the MacOS filesystem /System/Library/Kernels : Contains the OS kernel (replaces /boot folder in FHS) /Users : replaces the /home folder in FHS /var/root/ : replaces the /root folder in FHS /usr contains user installed utilities and apps user commands: /usr/bin for normal users /usr/sbin for admin users shared libraries: /usr/lib Man pages (manual page- software documentation) /usr/share/man executables that shouldn't directly be run by users /usr/libexec a subdirectory to place programs, libraries, and other files that don't come with the base OS /usr/local /dev contains device files /etc contains system configuration files and scripts /etc/paths contains a list of paths used by path_helper to build and set the PATH to search for commands along /bin contians executables to provide essential user utilities (e.g common command line commands like ls or pwd or cd) man hier : / root directory of the filesystem /bin/ user utilities fundamental to both single-user and multi-user environments /dev/ block and character device files /etc/ system configuration files and scripts /mach_kernel kernel executable (the operating system loaded into memory at boot time). /sbin/ system programs and administration utilities fundamental to both single-user and multi- user environments /tmp/ temporary files /usr/ contains the majority of user utilities and applications bin/ common utilities, programming tools, and apps include/ standard C include files arpa/ C include files for Internet service protocols hfs/ C include files for HFS machine/ machine specific C include files net/ misc network C include files netinet/ C include files for Internet standard protocols; see inet(4) nfs/ C include files for NFS (Network File System) objc/ C include files for Objective-C protocols/ C include files for Berkeley service protocols sys/ system C include files (kernel data structures) ufs/ C include files for UFS lib/ archive libraries libexec/ system daemons & system utilities (executed by other programs) local/ executables, libraries, etc. not included by the basic OS sbin/ system daemons & system utilities (executed by users) share/ architecture-independent data files calendar/ a variety of pre-fab calendar files dict/ word lists man/ manual pages misc/ misc system-wide ascii text files mk/ templates for make skel/ example . (dot) files for new accounts tabset/ tab description files zoneinfo/ timezone configuration information /var/ multi-purpose log, temporary, transient, and spool files at/ timed command scheduling files; see at(1) backups/ misc. backup files db/ misc. automatically generated system-specific database files log/ misc. system log files mail/ user mailbox files run/ system information files describing various info about system since it was booted rwho/ rwho data files spool/ misc. printer and mail system spooling directories tmp/ temporary files that are kept between system reboots folders/ per-user temporary files and caches","title":"Filesystem"},{"location":"basics/macos/#useful-commands","text":"man cmd will display the manual page for the terminal command (useful for getting the flag descriptions for commands like ls ) | pipe operator is great for doing additional commands to the output of the first command echo \"source /opt/ros/foxy/setup.zsh\" >> .zshrc is useful for adding things to the .zshrc without opening it up in an editor which python3 is usefull for figuring out where commands/executables are installed on the PATH compaudit | xargs chmod g-w basically runs an audit for insecure directories (usually related to read-write permissions) and removes any write permissions that should not be on directories ( Source ) needed to use this to fix a compaudit warning when sourcing ros2-foxy-base","title":"Useful Commands"},{"location":"basics/macos/#resources","text":"MacOS Filesystem PATH Explanation Bash Profile vs RC Homebrew symlinks in /usr/local/opt to /usr/local/Cellar","title":"Resources"},{"location":"basics/oop/","text":"Object Oriented Programming: What is a Class: A blueprint Fields (instance variables) What an object knows Methods(Functions) What an object does What is Inheritance: Parent/Super class that shares fields/methods with its subclasses that also have their own fields & methods Subclasses abstract out the super class's features Subclasses can override or extend methods that don't work Subclasses only define the changes since the super's fields & methods are already defined when you extend the super class Use is A? principle to decide whether to extend a class Ex: Is a Dog an Animal? Yes, so Dog extends Animal Ex: Is a Dog a cat? No, so Dog doesn't extend Cat Use inheritance when a subclass needs most of the methods in the superclass Do not use inheritance just to reuse code if is A? doesn't work class Animal{ private String name; private double height; private int weight; private String sound; public void setName(String newName){ name = newName; } public void setSound(String newSound){ sound = newSound; } } class Dog extends Animal{ public Dog(){ super(); //Calls super constructor setSound(\"Bark\"); } public void digHole(){ System.out.println(\"Hole dug\"); } } What is Encapsulation: Protects data Use private fields Do not set fields directly Use public getter & setter functions to access & change the data Setter = Mutator Getter = Accessor class Dog{ private double height; public void setHeight(newHeight){ if(newHeight > 0){ height = newHeight; } else{ //Throw an Error } } } Instance vs. Local Variables: Instance Variable(AKA fields) are declared in a class Local Variables are declared in a method What is Polymorphism: Allows you to write methods that don't need to change if new subclasses are created Ex: Dog can add a new method w/o changing Animal Allows you to put diff subclasses in one array Animal doggy = new Dog(); Animal kitty = new Cat(); Animal[] animals = [doggy,kitty]; kitty.getSound(); //Returns Meow doggy.digHole(); //Would not work ((Dog)doggy).digHole(); //Would Work You can't access methods this way if they are only in the subclass Need to cast the object to the subclass that contains that method Cannot reference non-static variables or non-static-methods(w/o an object) in a static method Cannot access private methods outside of a subclass/class What is an Abstract Class: Gives power of polymorphism w/o all the work There are no abstract fields but can have protected variables that are rewritten as private fields in subclasses All methods do not have to be abstract w/in an abstract class You can have static methods w/in abstract classes Cannot create objects from abstract classes but subclasses can extend them and be made into objects Have to override abstract methods in the subclass in order to extend the class abstract public Class Creature{ protected String name; public abstract void setName(newName); } What is an Interface: A class w/ only abstract methods Can implement as many interfaces to a class as you want Can only use public static and final fields Provide the ultimate flexibility Classes from different inheritance trees can use a common interface Avoid using interfaces just to force the creation of a method public interface Living { public void setName(String newName); } public class Monkey implements Living{ private name; public void setName(String newName){ name = newName; } }","title":"Object Oriented Programming"},{"location":"basics/oop/#object-oriented-programming","text":"","title":"Object Oriented Programming:"},{"location":"basics/oop/#what-is-a-class","text":"A blueprint Fields (instance variables) What an object knows Methods(Functions) What an object does","title":"What is a Class:"},{"location":"basics/oop/#what-is-inheritance","text":"Parent/Super class that shares fields/methods with its subclasses that also have their own fields & methods Subclasses abstract out the super class's features Subclasses can override or extend methods that don't work Subclasses only define the changes since the super's fields & methods are already defined when you extend the super class Use is A? principle to decide whether to extend a class Ex: Is a Dog an Animal? Yes, so Dog extends Animal Ex: Is a Dog a cat? No, so Dog doesn't extend Cat Use inheritance when a subclass needs most of the methods in the superclass Do not use inheritance just to reuse code if is A? doesn't work class Animal{ private String name; private double height; private int weight; private String sound; public void setName(String newName){ name = newName; } public void setSound(String newSound){ sound = newSound; } } class Dog extends Animal{ public Dog(){ super(); //Calls super constructor setSound(\"Bark\"); } public void digHole(){ System.out.println(\"Hole dug\"); } }","title":"What is Inheritance:"},{"location":"basics/oop/#what-is-encapsulation","text":"Protects data Use private fields Do not set fields directly Use public getter & setter functions to access & change the data Setter = Mutator Getter = Accessor class Dog{ private double height; public void setHeight(newHeight){ if(newHeight > 0){ height = newHeight; } else{ //Throw an Error } } }","title":"What is Encapsulation:"},{"location":"basics/oop/#instance-vs-local-variables","text":"Instance Variable(AKA fields) are declared in a class Local Variables are declared in a method","title":"Instance vs. Local Variables:"},{"location":"basics/oop/#what-is-polymorphism","text":"Allows you to write methods that don't need to change if new subclasses are created Ex: Dog can add a new method w/o changing Animal Allows you to put diff subclasses in one array Animal doggy = new Dog(); Animal kitty = new Cat(); Animal[] animals = [doggy,kitty]; kitty.getSound(); //Returns Meow doggy.digHole(); //Would not work ((Dog)doggy).digHole(); //Would Work You can't access methods this way if they are only in the subclass Need to cast the object to the subclass that contains that method Cannot reference non-static variables or non-static-methods(w/o an object) in a static method Cannot access private methods outside of a subclass/class","title":"What is Polymorphism:"},{"location":"basics/oop/#what-is-an-abstract-class","text":"Gives power of polymorphism w/o all the work There are no abstract fields but can have protected variables that are rewritten as private fields in subclasses All methods do not have to be abstract w/in an abstract class You can have static methods w/in abstract classes Cannot create objects from abstract classes but subclasses can extend them and be made into objects Have to override abstract methods in the subclass in order to extend the class abstract public Class Creature{ protected String name; public abstract void setName(newName); }","title":"What is an Abstract Class:"},{"location":"basics/oop/#what-is-an-interface","text":"A class w/ only abstract methods Can implement as many interfaces to a class as you want Can only use public static and final fields Provide the ultimate flexibility Classes from different inheritance trees can use a common interface Avoid using interfaces just to force the creation of a method public interface Living { public void setName(String newName); } public class Monkey implements Living{ private name; public void setName(String newName){ name = newName; } }","title":"What is an Interface:"},{"location":"basics/paradigms/","text":"What is a Programming Paradigm? A style of programming/way of thinking about software architecture A way/methodology, not a language Some languages are better for some paradigms than others Functional Programming (FP): Treats computation as the the evaluation of math functions and avoids changing-state and mutable data Passing data from function to function to get a result Functions are threatened as data (you can use them as parameters, return them, build functions from other functions, and build custom functions Have to be pure functions- not dependent on local/global states Good for modularity since each function will return the same output given the same input Object Oriented Programming (OOP): Based on the concept of \u201cobjects\u201d which may contain data in the form of fields/attributes and code in the form of procedures/methods Encapsulating data & behavior into objects that interact with other elements and can perform certain actions More details in aother note section Procedural Programming (PP): Based on the concept of procedure call where procedures/routines/subroutines/functions simply contain a series of computational steps to be carried out \u2022 AKA inline programming and it takes a top-down approach \u2022 Writing a list of instructions to tell the computer what to do step by step Relies on procedures/routines Resource","title":"Programming Paradigms"},{"location":"basics/paradigms/#what-is-a-programming-paradigm","text":"A style of programming/way of thinking about software architecture A way/methodology, not a language Some languages are better for some paradigms than others","title":"What is a Programming Paradigm?"},{"location":"basics/paradigms/#functional-programming-fp","text":"Treats computation as the the evaluation of math functions and avoids changing-state and mutable data Passing data from function to function to get a result Functions are threatened as data (you can use them as parameters, return them, build functions from other functions, and build custom functions Have to be pure functions- not dependent on local/global states Good for modularity since each function will return the same output given the same input","title":"Functional Programming (FP):"},{"location":"basics/paradigms/#object-oriented-programming-oop","text":"Based on the concept of \u201cobjects\u201d which may contain data in the form of fields/attributes and code in the form of procedures/methods Encapsulating data & behavior into objects that interact with other elements and can perform certain actions More details in aother note section","title":"Object Oriented Programming (OOP):"},{"location":"basics/paradigms/#procedural-programming-pp","text":"Based on the concept of procedure call where procedures/routines/subroutines/functions simply contain a series of computational steps to be carried out \u2022 AKA inline programming and it takes a top-down approach \u2022 Writing a list of instructions to tell the computer what to do step by step Relies on procedures/routines Resource","title":"Procedural Programming (PP):"},{"location":"basics/python/","text":"Python Ternary Conditionals condition = True x = 1 if condition else 0 Number Formatting num1 = 1_000_000_000 num2 = 10_000_000 total = num1 + num2 print(f'{total:,}') #Uses f-string to format output w/ commas Context Managers Manage resources such as IO connections, threads, db connections, etc. by opening & closing resources automatically with open('test.txt','r') as f: file_contents = f.read() Enumerate Functions names = ['Bob','Steve','Jim'] for index,name in enumerate(names): print(index,name) for index,name in enumerate(names, start=1): #Can specify starting index value print(index,name) Zip Function Loops over n lists at once. When lists are different lengths, it stops at the end of the shortest list for name, hero, universe in zip(names, heroes, universes): print(name,hero) for value in zip(names, heroes, universes): print(value) #Value is a tuple of the results of the 3 lists Unpacking a,b = (1,2) print(a) #1 print(b) #2 c,_ = (4,5) #use underscore when you don't want to use a variable print(c) #4 x,y,*z = (1,2,3,5,6,7) print(x) #1 print(y) #2 print(z) #[3,5,6,7] x,y,*_, z = (1,2,3,4,6,7,) #ignores all values after 1 & 2 but until 7, which is stored in z Python Executable MacOS installs python 2.7 by default and should not be deleted /usr/bin/python and /usr/bin/python2 are symlinks to default install: System/Library/Frameworks/Python.framework/Versions/2.7/bin/python2.7 Python 3+ versions are installed in /usr/local/bin/python3 is a symlink to version 3.5 installed in /Library/Frameworks/Python.framework/Versions/3.5 by downloading python from internet /usr/local/bin/python3.9 is a symlink to version 3.9 installed in /usr/local/Cellar by homebrew (same goes for pip3.9 ) /usr/bin/python3 is the actual install of version 3.8. Note sure how it got there but it is currently looked at on the path after the other version of python3 in the local/bin so it is not found unless the version is being explicitly looked for All 3 versions of python3 are needed for ROS stuff so thats fun python3 -m module_name Searches the path for the module and excecutes its contents as the main module (Runs the specified module even if it isnt in the cwd) Note: find symlinks using ls -l","title":"Python"},{"location":"basics/python/#python","text":"","title":"Python"},{"location":"basics/python/#ternary-conditionals","text":"condition = True x = 1 if condition else 0","title":"Ternary Conditionals"},{"location":"basics/python/#number-formatting","text":"num1 = 1_000_000_000 num2 = 10_000_000 total = num1 + num2 print(f'{total:,}') #Uses f-string to format output w/ commas","title":"Number Formatting"},{"location":"basics/python/#context-managers","text":"Manage resources such as IO connections, threads, db connections, etc. by opening & closing resources automatically with open('test.txt','r') as f: file_contents = f.read()","title":"Context Managers"},{"location":"basics/python/#enumerate-functions","text":"names = ['Bob','Steve','Jim'] for index,name in enumerate(names): print(index,name) for index,name in enumerate(names, start=1): #Can specify starting index value print(index,name)","title":"Enumerate Functions"},{"location":"basics/python/#zip-function","text":"Loops over n lists at once. When lists are different lengths, it stops at the end of the shortest list for name, hero, universe in zip(names, heroes, universes): print(name,hero) for value in zip(names, heroes, universes): print(value) #Value is a tuple of the results of the 3 lists","title":"Zip Function"},{"location":"basics/python/#unpacking","text":"a,b = (1,2) print(a) #1 print(b) #2 c,_ = (4,5) #use underscore when you don't want to use a variable print(c) #4 x,y,*z = (1,2,3,5,6,7) print(x) #1 print(y) #2 print(z) #[3,5,6,7] x,y,*_, z = (1,2,3,4,6,7,) #ignores all values after 1 & 2 but until 7, which is stored in z","title":"Unpacking"},{"location":"basics/python/#python-executable","text":"MacOS installs python 2.7 by default and should not be deleted /usr/bin/python and /usr/bin/python2 are symlinks to default install: System/Library/Frameworks/Python.framework/Versions/2.7/bin/python2.7 Python 3+ versions are installed in /usr/local/bin/python3 is a symlink to version 3.5 installed in /Library/Frameworks/Python.framework/Versions/3.5 by downloading python from internet /usr/local/bin/python3.9 is a symlink to version 3.9 installed in /usr/local/Cellar by homebrew (same goes for pip3.9 ) /usr/bin/python3 is the actual install of version 3.8. Note sure how it got there but it is currently looked at on the path after the other version of python3 in the local/bin so it is not found unless the version is being explicitly looked for All 3 versions of python3 are needed for ROS stuff so thats fun python3 -m module_name Searches the path for the module and excecutes its contents as the main module (Runs the specified module even if it isnt in the cwd) Note: find symlinks using ls -l","title":"Python Executable"},{"location":"basics/regex/","text":"Regular expressions operate by moving character by character, from left to right, through a piece of text. When the regular expression finds a character that matches the first piece of the expression, it looks to find a continuous sequence of matching characters. Alternation is performed in regular expressions with the pipe symbol, | , allowing us to match either the characters preceding the | OR the characters after the | . Grouping , denoted with the open parenthesis ( and the closing parenthesis ) , lets us group parts of a regular expression together, and allows us to limit alternation to part of the regex. Character sets , denoted by a pair of brackets [] , let us match one character from a series of characters, allowing for matches with incorrect or different spellings. Negated Character Sets : at the front of a character set, the ^ negates the set, matching any character that is not stated. Thus the regex [^cat] will match any character that is not c , a , or t , and would completely match each character d , o or g . Wildcards . will match any single character (letter, number, symbol or whitespace) in a piece of text. We can use the escape character, \\ , to escape the wildcard functionality of the . and match an actual period. Ranges allow us to specify a range of characters in which we can make a match without having to type out each individual character. The - character allows us to specify that we are interested in matching a range of characters. Shorthand Character Classes represent common ranges and make writing regular expressions much simpler: \\w : the \u201cword character\u201d class represents the regex range [A-Za-z0-9_] , and it matches a single uppercase character, lowercase character, digit or underscore \\d : the \u201cdigit character\u201d class represents the regex range [0-9] , and it matches a single digit character \\s : the \u201cwhitespace character\u201d class represents the regex range [ \\t\\r\\n\\f\\v] , matching a single space, tab, carriage return, line break, form feed, or vertical tab Negated Character Classes are shorthands that match any character not in the regular shorthand classes: \\W : the \u201cnon-word character\u201d class represents the regex range [^A-Za-z0-9_] , matching any character that is not included in the range represented by \\w \\D : the \u201cnon-digit character\u201d class represents the regex range [^0-9] , matching any character that is not included in the range represented by \\d \\S : the \u201cnon-whitespace character\u201d class represents the regex range [^ \\t\\r\\n\\f\\v] , matching any character that is not included in the range represented by \\s Fixed quantifiers , denoted with curly braces {} , let us indicate the exact quantity of a character we wish to match, or allow us to provide a quantity range to match on. \\w{3} will match exactly 3 word characters \\w{4,7} will match at minimum 4 word characters and at maximum 7 word characters An important note is that quantifiers are considered to be greedy . This means that they will match the greatest quantity of characters they possibly can. For example, the regex mo{2,4} will match the text moooo in the string moooo , and not return a match of moo , or mooo . Optional quantifiers , indicated by the question mark ? , allow us to indicate a character in a regex is optional, or can appear either 0 times or 1 time. The ? only applies to the character/grouping directly before it. Use the escape character in your regex in order to match a question mark ? in a piece of text. The Kleene star , denoted with the asterisk * , is also a quantifier, and matches the preceding character 0 or more times. This means that the character doesn\u2019t need to appear, can appear once, or can appear many many times. The Kleene plus , denoted by the plus + matches the preceding character 1 or more times. The anchors hat ^ and dollar sign $ are used to match text at the start and the end of a string, respectively. The regex ^Monkeys: my mortal enemy$ will completely match the text Monkeys: my mortal enemy but not match Spider Monkeys: my mortal enemy in the wild Summary: Regular expressions are special sequences of characters that describe a pattern of text that is to be matched We can use literals to match the exact characters that we desire Alternation , using the pipe symbol | , allows us to match the text preceding or following the | Character sets , denoted by a pair of brackets [] , let us match one character from a series of characters Wildcards , represented by the period or dot . , will match any single character (letter, number, symbol or whitespace) Ranges allow us to specify a range of characters in which we can make a match Shorthand character classes like \\w , \\d and \\s represent the ranges representing word characters, digit characters, and whitespace characters, respectively Groupings , denoted with parentheses () , group parts of a regular expression together, and allows us to limit alternation to part of a regex Fixed quantifiers , represented with curly braces {} , let us indicate the exact quantity or a range of quantity of a character we wish to match Optional quantifiers , indicated by the question mark ? , allow us to indicate a character in a regex is optional, or can appear either 0 times or 1 time The Kleene star , denoted with the asterisk * , is a quantifier that matches the preceding character 0 or more times The Kleene plus , denoted by the plus + , matches the preceding character 1 or more times The anchor symbols hat ^ and dollar sign $ are used to match text at the start and end of a string, respectively","title":"Regex"},{"location":"basics/regex/#summary","text":"Regular expressions are special sequences of characters that describe a pattern of text that is to be matched We can use literals to match the exact characters that we desire Alternation , using the pipe symbol | , allows us to match the text preceding or following the | Character sets , denoted by a pair of brackets [] , let us match one character from a series of characters Wildcards , represented by the period or dot . , will match any single character (letter, number, symbol or whitespace) Ranges allow us to specify a range of characters in which we can make a match Shorthand character classes like \\w , \\d and \\s represent the ranges representing word characters, digit characters, and whitespace characters, respectively Groupings , denoted with parentheses () , group parts of a regular expression together, and allows us to limit alternation to part of a regex Fixed quantifiers , represented with curly braces {} , let us indicate the exact quantity or a range of quantity of a character we wish to match Optional quantifiers , indicated by the question mark ? , allow us to indicate a character in a regex is optional, or can appear either 0 times or 1 time The Kleene star , denoted with the asterisk * , is a quantifier that matches the preceding character 0 or more times The Kleene plus , denoted by the plus + , matches the preceding character 1 or more times The anchor symbols hat ^ and dollar sign $ are used to match text at the start and end of a string, respectively","title":"Summary:"},{"location":"basics/swe-notes/","text":"Software Engineering Notebook UML Class Diagram Visual diagram used to demonstrate classes, their attributes/functions, and the relationships between classes Useful to start one before a large project to see how all the components interact Youtube Tutorial Lucid Chart (Online software used by numerous Fortune 500 companies for creating visual workspaces w/ things like UML diagrams) Class Construction Declare all fields as private/protected whenever possible Use getter and setter functions to access and update class fields Initialize the fields in the constructor Code Readability Readability and maintainability separate coders from good coders Focus on being able to read and understand parts of parts of code (e.g. modules/functions) without having to read entire rest of codebase Code should be Intuitive and self-documenting Readability > Cleverness/Shortness If you write the code as clever as possible, you will not be smart enough to debug it Consistency in style (e.g. spacing, braces) Commenting/Documentation Learning to write good comments is a skill Any good developer can figure out what your code does so your comments should explain why it does it that way Comment on why you made the decisions you did in your code Software Design Patterns Use encapsulation in order to separate concerns (i.e. possible points of breakdown in locally important assumptions such as object types) Try to limit managing global states (e.g. updating/referencing) since that can easily get messy, complicated, and buggy Clarity of a codebase greatly improves when pure functions that access no external state are used Functional languages like Haskell do this really well Don\u2019t switch between programming designs (e.g. pub/sub, actors, MVC) in connected parts of a codebase Create Data Abstraction Layers Ex: Don\u2019t have queries for your database in your application code. Instead create a separate library between the database and application that handles all the queries and provides easy to use getter functions like load_users(). Creates consistent styles in queries Limits the number of places to change queries if the DB schema changes Building a Software Stack Don\u2019t reinvent the wheel when not necessary Reliance on 3rd-party/open source software does leave you vulnerable to their security issues and makes you reliant on other people\u2019s maintenance of the dependencies Choose Appropriate Database: SQL: Postgres / MySQL / MariaDB / MemSQL / Amazon RDS Key Value Stores: Redis / Memcache / Riak NoSQL: MongoDB / Cassandra Hosted DBs: AWS RDS / DynamoDB / AppEngine Datastore Heavy Lifting: Amazon MR / Hadoop (Hive/Pig) / Cloudera / Google Big Query Debugging Come up w/ a hypothesis and test it (repeat until you fix the bug) Think like a scientist when debugging Record hypothesis and result Reproduce the bug locally rather than on a server (if convenient) Once you can fix it locally (which is faster & easier) you can change it on the server version Read the source code carefully and make minor alterations according to your hypothesis Use debuggers instead of messy print statements Problem Solving Define the problem Brainstorm (no idea is a bad idea) Pseudo-Code (don\u2019t worry about syntax- get the ideas down) Whiteboarding/writing is useful Implement (test as you go and make sure each component works before moving on) Avoid building out a whole solution w/o testing any of the parts Optimize efficiency (Go back and try to condense code, make more efficient, etc.) Time, memory, etc. Don't optimize too soon or overoptimize something that is fine Transition solution to another language if learning a new language General Tips You are responsible for code quality Use meaningful names Write code that expresses intent Code should speak for itself (Less comments = Less maintenance) Leave the code better than you found it Single-responsibility code Function does one thing well Less arguments = better function Tests! (Test Driven Development) Work on the big picture skeleton for the program and then fill in the details later Interface first, implementation later Independent components that can be used in different places Master your craft Create a minimum viable product (MVP) with the base functionality and then iterate by adding more features Notes on SWE Not an industry, it\u2019s a skill achieved with lots of practice Applicable to all industries available today (i.e. software runs everything) Solving problems is an art form-- you get better with lifelong practice Resources Readability & Software Design Practices Clean Code (Book) Commenting Less REST API Design","title":"Software Engineering Notebook"},{"location":"basics/swe-notes/#software-engineering-notebook","text":"","title":"Software Engineering Notebook"},{"location":"basics/swe-notes/#uml-class-diagram","text":"Visual diagram used to demonstrate classes, their attributes/functions, and the relationships between classes Useful to start one before a large project to see how all the components interact Youtube Tutorial Lucid Chart (Online software used by numerous Fortune 500 companies for creating visual workspaces w/ things like UML diagrams)","title":"UML Class Diagram"},{"location":"basics/swe-notes/#class-construction","text":"Declare all fields as private/protected whenever possible Use getter and setter functions to access and update class fields Initialize the fields in the constructor","title":"Class Construction"},{"location":"basics/swe-notes/#code-readability","text":"Readability and maintainability separate coders from good coders Focus on being able to read and understand parts of parts of code (e.g. modules/functions) without having to read entire rest of codebase Code should be Intuitive and self-documenting Readability > Cleverness/Shortness If you write the code as clever as possible, you will not be smart enough to debug it Consistency in style (e.g. spacing, braces)","title":"Code Readability"},{"location":"basics/swe-notes/#commentingdocumentation","text":"Learning to write good comments is a skill Any good developer can figure out what your code does so your comments should explain why it does it that way Comment on why you made the decisions you did in your code","title":"Commenting/Documentation"},{"location":"basics/swe-notes/#software-design-patterns","text":"Use encapsulation in order to separate concerns (i.e. possible points of breakdown in locally important assumptions such as object types) Try to limit managing global states (e.g. updating/referencing) since that can easily get messy, complicated, and buggy Clarity of a codebase greatly improves when pure functions that access no external state are used Functional languages like Haskell do this really well Don\u2019t switch between programming designs (e.g. pub/sub, actors, MVC) in connected parts of a codebase Create Data Abstraction Layers Ex: Don\u2019t have queries for your database in your application code. Instead create a separate library between the database and application that handles all the queries and provides easy to use getter functions like load_users(). Creates consistent styles in queries Limits the number of places to change queries if the DB schema changes","title":"Software Design Patterns"},{"location":"basics/swe-notes/#building-a-software-stack","text":"Don\u2019t reinvent the wheel when not necessary Reliance on 3rd-party/open source software does leave you vulnerable to their security issues and makes you reliant on other people\u2019s maintenance of the dependencies Choose Appropriate Database: SQL: Postgres / MySQL / MariaDB / MemSQL / Amazon RDS Key Value Stores: Redis / Memcache / Riak NoSQL: MongoDB / Cassandra Hosted DBs: AWS RDS / DynamoDB / AppEngine Datastore Heavy Lifting: Amazon MR / Hadoop (Hive/Pig) / Cloudera / Google Big Query","title":"Building a Software Stack"},{"location":"basics/swe-notes/#debugging","text":"Come up w/ a hypothesis and test it (repeat until you fix the bug) Think like a scientist when debugging Record hypothesis and result Reproduce the bug locally rather than on a server (if convenient) Once you can fix it locally (which is faster & easier) you can change it on the server version Read the source code carefully and make minor alterations according to your hypothesis Use debuggers instead of messy print statements","title":"Debugging"},{"location":"basics/swe-notes/#problem-solving","text":"Define the problem Brainstorm (no idea is a bad idea) Pseudo-Code (don\u2019t worry about syntax- get the ideas down) Whiteboarding/writing is useful Implement (test as you go and make sure each component works before moving on) Avoid building out a whole solution w/o testing any of the parts Optimize efficiency (Go back and try to condense code, make more efficient, etc.) Time, memory, etc. Don't optimize too soon or overoptimize something that is fine Transition solution to another language if learning a new language","title":"Problem Solving"},{"location":"basics/swe-notes/#general-tips","text":"You are responsible for code quality Use meaningful names Write code that expresses intent Code should speak for itself (Less comments = Less maintenance) Leave the code better than you found it Single-responsibility code Function does one thing well Less arguments = better function Tests! (Test Driven Development) Work on the big picture skeleton for the program and then fill in the details later Interface first, implementation later Independent components that can be used in different places Master your craft Create a minimum viable product (MVP) with the base functionality and then iterate by adding more features","title":"General Tips"},{"location":"basics/swe-notes/#notes-on-swe","text":"Not an industry, it\u2019s a skill achieved with lots of practice Applicable to all industries available today (i.e. software runs everything) Solving problems is an art form-- you get better with lifelong practice","title":"Notes on SWE"},{"location":"basics/swe-notes/#resources","text":"Readability & Software Design Practices Clean Code (Book) Commenting Less REST API Design","title":"Resources"},{"location":"basics/terminal-cmds/","text":"Terminal Commands (Mac) Navigation: cd {/path/to/folder} : changes directory to specified path cd / : goes to root directory cd ~ : goes to user directory ls : lists all files/folders in the current working directory pwd : prints the path to the current working directory| Creating & Deleting: mkdir {foldername} : makes a folder with the specified nam rm {filename} : removes the specified file rm -r {foldername} : removes the specified folder recursively touch {filename} : creates the specified file| mv {filename} {new filename} : renames the file/folder to the 2nd name Opening Files/Folders: open {filename} : opens the file with the default program open {filename} -a \"{program name}\" : opens the file in the specified application open . : opens the current folder in finder open . -a \"{program name}\" opens the folder in the specified application Terminal Commands Different in Windows: dir - list files echo > {filename} - create an empty file del {filename} - remove a file rmdir {directory name} - remove a directory and all files within rename {filename} {new filename} - rename a file or folder start {filename} - open file in default program start . - open current directory cls - clear the terminal screen Vim Commands Command Function i insert/typing mode esc leave insert mode :w save additions :wq save & quit :q! quit & discard changes Key Movement w front of next word b front of previous word 0 start of line $ end of line g last line a append to final line","title":"Terminal cmds"},{"location":"basics/terminal-cmds/#terminal-commands-mac","text":"","title":"Terminal Commands (Mac)"},{"location":"basics/terminal-cmds/#navigation","text":"cd {/path/to/folder} : changes directory to specified path cd / : goes to root directory cd ~ : goes to user directory ls : lists all files/folders in the current working directory pwd : prints the path to the current working directory|","title":"Navigation:"},{"location":"basics/terminal-cmds/#creating-deleting","text":"mkdir {foldername} : makes a folder with the specified nam rm {filename} : removes the specified file rm -r {foldername} : removes the specified folder recursively touch {filename} : creates the specified file| mv {filename} {new filename} : renames the file/folder to the 2nd name","title":"Creating &amp; Deleting:"},{"location":"basics/terminal-cmds/#opening-filesfolders","text":"open {filename} : opens the file with the default program open {filename} -a \"{program name}\" : opens the file in the specified application open . : opens the current folder in finder open . -a \"{program name}\" opens the folder in the specified application","title":"Opening Files/Folders:"},{"location":"basics/terminal-cmds/#terminal-commands-different-in-windows","text":"dir - list files echo > {filename} - create an empty file del {filename} - remove a file rmdir {directory name} - remove a directory and all files within rename {filename} {new filename} - rename a file or folder start {filename} - open file in default program start . - open current directory cls - clear the terminal screen","title":"Terminal Commands Different in Windows:"},{"location":"basics/terminal-cmds/#vim-commands","text":"Command Function i insert/typing mode esc leave insert mode :w save additions :wq save & quit :q! quit & discard changes Key Movement w front of next word b front of previous word 0 start of line $ end of line g last line a append to final line","title":"Vim Commands"},{"location":"data_structures/graph/","text":"Graph Theory is the mathematical theory of the properties and applications of graphs/networks Types of Graphs Undirected Graph - edges have no orientation (i.e. edge (u,v) == edge (v,u) ) Directed Graph - edges have orientations (i.e. edge (u,v) is the edge from node u to node v) Weighted Graphs - edges contain a certain weight that represent an arbitrary value such as cost, distance, quantity, etc. (Can be directed or undirected). \u200b Ex: (u, v, w) is the edge from node u to node v with a weight of w Special Graphs Tree an undirected graph with no cycles (equivalent definition- a connected graph with N nodes and N - 1 edges) Rooted Tree is a tree with a designated root node where every edge either points away from or towards the root node \u200b Arborescence (out-tree) - edges point away from the root \u200b Anti-arborescence (in-tree) - edges point towards the root Directed Acyclic Graphs (DAGs) - directed graphs with no cycles. Imporant in representing strctures with dependencies and prerequisites. (All out-trees are DAGs but not all DAGs are out-trees) Bipartite Graph - the vertices can be split into two independent groups U, V such that every edge connects between U and V. Other definitions are- the graph is two colourable or there is no odd length cycle Complete Graph - there is a unique edge between every pair of nodes (complete graph with n vertices is denoted as Kn) Representing Graphs:","title":"Graph"},{"location":"data_structures/hash-table/","text":"Hashmaps: Built on top of an array using a special indexing system. A key-value storage with fast assignments and lookup. A table that represents a map from a set of keys to a set of values. Uses a hash function which turns a key into an index into the underlying array. A hash collision is when a hash function returns the same index for two different keys. Hash collision strategies: Separate Chaining - each array index points to a different data structure (e.g. array of linked lists) Open addressing -a collision triggers a probing sequence to find where to store the value for a given key. Hash table: A key-value store that uses an array and a hashing function to save and retrieve values. Key: The identifier given to a value for later retrieval. Hash function: A function that takes some input and returns a number Compression function: A function that transforms its inputs into some smaller range of possible outputs (e.g. Hash Function) Key property is that it is not reversible Recipe for saving to a hash table: - Take the key and plug it into the hash function, getting the hash code. - Modulo that hash code by the length of the underlying array, getting an array index. - Check if the array at that index is empty, if so, save the value (and the key) there. - If the array is full at that index continue to the next possible position depending on your collision strategy. Recipe for retrieving from a hash table: - Take the key and plug it into the hash function, getting the hash code. - Modulo that hash code by the length of the underlying array, getting an array index. - Check if the array at that index has contents, if so, check the key saved there. - If the key matches the one you're looking for, return the value. - If the keys don't match, continue to the next position depending on your collision strategy.","title":"Hash Table"},{"location":"data_structures/hash-table/#hashmaps","text":"Built on top of an array using a special indexing system. A key-value storage with fast assignments and lookup. A table that represents a map from a set of keys to a set of values. Uses a hash function which turns a key into an index into the underlying array. A hash collision is when a hash function returns the same index for two different keys. Hash collision strategies: Separate Chaining - each array index points to a different data structure (e.g. array of linked lists) Open addressing -a collision triggers a probing sequence to find where to store the value for a given key. Hash table: A key-value store that uses an array and a hashing function to save and retrieve values. Key: The identifier given to a value for later retrieval. Hash function: A function that takes some input and returns a number Compression function: A function that transforms its inputs into some smaller range of possible outputs (e.g. Hash Function) Key property is that it is not reversible Recipe for saving to a hash table: - Take the key and plug it into the hash function, getting the hash code. - Modulo that hash code by the length of the underlying array, getting an array index. - Check if the array at that index is empty, if so, save the value (and the key) there. - If the array is full at that index continue to the next possible position depending on your collision strategy. Recipe for retrieving from a hash table: - Take the key and plug it into the hash function, getting the hash code. - Modulo that hash code by the length of the underlying array, getting an array index. - Check if the array at that index has contents, if so, check the key saved there. - If the key matches the one you're looking for, return the value. - If the keys don't match, continue to the next position depending on your collision strategy.","title":"Hashmaps:"},{"location":"data_structures/heap/","text":"Heaps: Used to maintain a maximum or minimum value in a dataset. Commonly used to create a priority queue. Heaps tracking the maximum or minimum value are max-heaps or min-heaps. Conceptually, the tree representation is beneficial for understanding. Practically, we implement heaps in a sequential data structure like an array or list for efficiency. Think of the min-heap as a binary tree with two qualities: The root is the minimum value of the dataset. Every child\u2019s value is greater than its parent. These two properties are the defining characteristics of the min-heap. By maintaining these two properties, we can efficiently retrieve and update the minimum value. As we add elements to the heap, they\u2019re added from left to right until we\u2019ve filled the entire level. By filling the tree from left to right; we\u2019re leaving no gaps in the array. The location of each child or parent derives from a formula using the index. left child: (index * 2) + 1 right child: (index * 2) + 2 parent: (index - 1) / 2 \u2014 not used on the root! Sometimes you will add an element to the heap that violates the heap\u2019s essential properties. Ex: adding 3 as a left child of 11 in a min-heap which violates the min-heap property that children must be larger or equal to their parent. Heapifying- restoring the fundamental heap properties through swapping elements in the tree We\u2019re adding an element to the bottom of the tree and moving upwards, so we\u2019re heapifying up. As long as we\u2019ve violated the heap properties, we\u2019ll swap the offending child with its parent until we restore the properties, or until there\u2019s no parent left. If there is no parent left, that element becomes the new root of the tree.","title":"Heap"},{"location":"data_structures/heap/#heaps","text":"Used to maintain a maximum or minimum value in a dataset. Commonly used to create a priority queue. Heaps tracking the maximum or minimum value are max-heaps or min-heaps. Conceptually, the tree representation is beneficial for understanding. Practically, we implement heaps in a sequential data structure like an array or list for efficiency. Think of the min-heap as a binary tree with two qualities: The root is the minimum value of the dataset. Every child\u2019s value is greater than its parent. These two properties are the defining characteristics of the min-heap. By maintaining these two properties, we can efficiently retrieve and update the minimum value. As we add elements to the heap, they\u2019re added from left to right until we\u2019ve filled the entire level. By filling the tree from left to right; we\u2019re leaving no gaps in the array. The location of each child or parent derives from a formula using the index. left child: (index * 2) + 1 right child: (index * 2) + 2 parent: (index - 1) / 2 \u2014 not used on the root! Sometimes you will add an element to the heap that violates the heap\u2019s essential properties. Ex: adding 3 as a left child of 11 in a min-heap which violates the min-heap property that children must be larger or equal to their parent. Heapifying- restoring the fundamental heap properties through swapping elements in the tree We\u2019re adding an element to the bottom of the tree and moving upwards, so we\u2019re heapifying up. As long as we\u2019ve violated the heap properties, we\u2019ll swap the offending child with its parent until we restore the properties, or until there\u2019s no parent left. If there is no parent left, that element becomes the new root of the tree.","title":"Heaps:"},{"location":"data_structures/linked-list/","text":"Linked Lists: Are comprised of nodes The nodes contain a link to the next node (and also the previous node for bidirectional linked lists) Can be unidirectional or bidirectional Are a basic data structure, and form the basis for many other data structures Have a single head node, which serves as the first node in the list Require some maintenance in order to add or remove nodes Nodes are not located sequentially in memory like arrays since they use pointers Allows for quick insertions/removals Common Functions on Linked Lists: get the head node of the list (it\u2019s like peeking at the first item in line) add a new node to the beginning of the list print out the list values in order remove a node that has a particular value","title":"Linked List"},{"location":"data_structures/linked-list/#linked-lists","text":"Are comprised of nodes The nodes contain a link to the next node (and also the previous node for bidirectional linked lists) Can be unidirectional or bidirectional Are a basic data structure, and form the basis for many other data structures Have a single head node, which serves as the first node in the list Require some maintenance in order to add or remove nodes Nodes are not located sequentially in memory like arrays since they use pointers Allows for quick insertions/removals","title":"Linked Lists:"},{"location":"data_structures/linked-list/#common-functions-on-linked-lists","text":"get the head node of the list (it\u2019s like peeking at the first item in line) add a new node to the beginning of the list print out the list values in order remove a node that has a particular value","title":"Common Functions on Linked Lists:"},{"location":"data_structures/queue/","text":"Queues Enqueue - adds data to the \u201cback\u201d or end of the queue Dequeue - provides and removes data from the \u201cfront\u201d or beginning of the queue Peek - reveals data from the \u201cfront\u201d of the queue without removing it Queues process data First In, First Out (FIFO) Implemented using a linked list Head Node- front of queue Tail Node- back of queue Bounded Queue - a queue that has a limit on the amount of data that can be placed into it Queue Overflow - attempting to enqueue data onto an already full queue Queue Underflow - attempting to dequeue data from an empty queue Traversal or modification to other nodes within the linked list is disallowed Since both ends of the queue must be accessible, a reference to both the head node and the tail node must be maintained.","title":"Queue"},{"location":"data_structures/queue/#queues","text":"Enqueue - adds data to the \u201cback\u201d or end of the queue Dequeue - provides and removes data from the \u201cfront\u201d or beginning of the queue Peek - reveals data from the \u201cfront\u201d of the queue without removing it Queues process data First In, First Out (FIFO) Implemented using a linked list Head Node- front of queue Tail Node- back of queue Bounded Queue - a queue that has a limit on the amount of data that can be placed into it Queue Overflow - attempting to enqueue data onto an already full queue Queue Underflow - attempting to dequeue data from an empty queue Traversal or modification to other nodes within the linked list is disallowed Since both ends of the queue must be accessible, a reference to both the head node and the tail node must be maintained.","title":"Queues"},{"location":"data_structures/stack/","text":"Stacks Implemented using Linked Lists b/c it is more efficient than lists/arrays Contain data nodes Push adds data to the top of the stack Pop removes and provides data from the top of the stack Peek reveals data on the top of the stack Can have a limited size Pushing data onto a full stack results in a stack overflow Stacks process data Last In, First Out (LIFO)","title":"Stack"},{"location":"data_structures/stack/#stacks","text":"Implemented using Linked Lists b/c it is more efficient than lists/arrays Contain data nodes Push adds data to the top of the stack Pop removes and provides data from the top of the stack Peek reveals data on the top of the stack Can have a limited size Pushing data onto a full stack results in a stack overflow Stacks process data Last In, First Out (LIFO)","title":"Stacks"},{"location":"data_structures/tree/","text":"Trees: Wide- parent nodes referencing many child nodes. Deep- many parent-child relationships. Each time we move from a parent to a child, we\u2019re moving down a level. Depending on the orientation we refer to this as the depth (counting levels down from the root node) or height (counting levels up from a leaf node). Useful for modeling data that has a hierarchical relationship which moves in the direction from parent to child. No child node will have more than one parent. root: A node which has no parent. One per tree. parent: A node which references other nodes. child: Nodes referenced by other nodes. sibling: Nodes which have the same parent. leaf: Nodes which have no children. level: The height or depth of the tree. Root nodes are at level 1, their children are at level 2, and so on. Binary Search Trees Type of tree where each parent can have no more than two children, known as the left child and right child. Left child values must be lesser than their parent. Right child values must be greater than their parent.","title":"Tree"},{"location":"data_structures/tree/#trees","text":"Wide- parent nodes referencing many child nodes. Deep- many parent-child relationships. Each time we move from a parent to a child, we\u2019re moving down a level. Depending on the orientation we refer to this as the depth (counting levels down from the root node) or height (counting levels up from a leaf node). Useful for modeling data that has a hierarchical relationship which moves in the direction from parent to child. No child node will have more than one parent. root: A node which has no parent. One per tree. parent: A node which references other nodes. child: Nodes referenced by other nodes. sibling: Nodes which have the same parent. leaf: Nodes which have no children. level: The height or depth of the tree. Root nodes are at level 1, their children are at level 2, and so on.","title":"Trees:"},{"location":"data_structures/tree/#binary-search-trees","text":"Type of tree where each parent can have no more than two children, known as the left child and right child. Left child values must be lesser than their parent. Right child values must be greater than their parent.","title":"Binary Search Trees"},{"location":"databases/dbms/","text":"Database Mangament Systems (DBMS) Special software program to help create and maintain a database Easy to handle lots of info Handles security, Backups, import/exporting data, & concurrency interacts w/ software apps and programming languages Ex: Amazon.com will interact w/ the DBMS in order to create, read, update, & delete product info Relational Database (SQL) organize data into 1 or more tables Each table has columns and rows A unique key identifies each row Relation Database Management Systems (RDBMS) mySQL,Oracle,postgreSQL,mariaDB,etc Non-Relational Database (noSQL) Not organized in traditional table Key-value stores, Documents, Graphs, Flexible Tablees, etc Non-Relational Database Management Systems (NRDBMS) mongoDB,dynamoDB,apache cassandra, firebase, etc no standard language b/c each implementation is language specific","title":"DBMS"},{"location":"databases/dbms/#database-mangament-systems-dbms","text":"Special software program to help create and maintain a database Easy to handle lots of info Handles security, Backups, import/exporting data, & concurrency interacts w/ software apps and programming languages Ex: Amazon.com will interact w/ the DBMS in order to create, read, update, & delete product info","title":"Database Mangament Systems (DBMS)"},{"location":"databases/dbms/#relational-database-sql","text":"organize data into 1 or more tables Each table has columns and rows A unique key identifies each row Relation Database Management Systems (RDBMS) mySQL,Oracle,postgreSQL,mariaDB,etc","title":"Relational Database (SQL)"},{"location":"databases/dbms/#non-relational-database-nosql","text":"Not organized in traditional table Key-value stores, Documents, Graphs, Flexible Tablees, etc Non-Relational Database Management Systems (NRDBMS) mongoDB,dynamoDB,apache cassandra, firebase, etc no standard language b/c each implementation is language specific","title":"Non-Relational Database (noSQL)"},{"location":"databases/sql/","text":"Structured Query Language (SQL) Standardized language for interacting w/ RDBMS used to perform CRUD operations and other admin tasks(e.g user managment, security, backup, etc) SQL code on one RDBMS might not be portable to a different RDBMS b/c SQL implementations vary btw systems 4 Types of Languages in SQL: Data Query Language (DQL) - queries the DB for stored info Data Definition Language (DDL) - defines database schemas Data Control Language (DCL) - controls access to data in DB & manages users and permissions Data Manipulation Laguage (DML) - inserts, updates, and deletes data from DB Keys Primary Key - attribute that is unique for each row in the table Surrogate Key - type of primary key that has no mapping to anything in the real world Natural Key - type of primary key that has a mapping to the real world (e.g. SSN) Foreign Key - stores the primary key of a row in another database table (Link to another table) Can define relationships between tables or within a table Composite Key - type of primary key that is made up of two attributes Used when either of the attributes on their own do not uniquely identify a row Datatypes INT DECIMAL(M,N) -- m: total # digits, n: # digits after decimal place VARCHAR(L) -- String of text of max length L BLOB -- Binary large objects, stores large data like images DATE -- 'YYYY-MM-DD' TIMESTAMP -- 'YYYY-MM-DD HH:MM:SS' Functions --Find Num of Students SELECT COUNT(student_id) FROM students; --Find Num of female student born after 1980 SELECT COUNT(student_id) FROM students WHERE sex = 'F' AND birth_date > '1981-01-01'; --Find avg male salary SELECT AVG(salary) FROM employees WHERE sex = 'M'; --Find sum of all salaries SELECT SUM(salary) FROM employees; --Find num of males & females SELECT COUNT(sex), sex FROM employe GROUP BY sex; --Group By command used for aggregation Queries SELECT student.name AS forename, student.major FROM student ORDER BY name DESC --Descending alphabetical order LIMIT 20; --limits # of entries returned -- Comparison Operators: <, >, <=, >=, =, AND, OR, <> (not equal to) Tables CREATE TABLE student ( student_id INT AUTO_INCREMENT, -- you don't have to insert a primary key b/c its auto incremented name VARCHAR(20) UNIQUE, major VARCHAR(20) DEFAULT 'undecided', PRIMARY KEY(student_id) ); -- Delete a Table DROP TABLE student; --Show the table schema DESCRIBE student; -- Add & Drop Attributes ALTER TABLE student ADD gpa DECIMAL(3,2); ALTER TABLE student DROP COLUMN gpa; Insert, Update, Delete INSERT INTO student VALUES(1,'Jack','Biology'); INSERT INTO student(name) VALUES('Kate'); UPDATE student SET major = 'Computer Science and Engineering' WHERE major = 'Computer Science' OR major = 'Computer Engineering'; DELETE FROM student WHERE student_id > 100;","title":"SQL"},{"location":"databases/sql/#structured-query-language-sql","text":"Standardized language for interacting w/ RDBMS used to perform CRUD operations and other admin tasks(e.g user managment, security, backup, etc) SQL code on one RDBMS might not be portable to a different RDBMS b/c SQL implementations vary btw systems","title":"Structured Query Language (SQL)"},{"location":"databases/sql/#4-types-of-languages-in-sql","text":"Data Query Language (DQL) - queries the DB for stored info Data Definition Language (DDL) - defines database schemas Data Control Language (DCL) - controls access to data in DB & manages users and permissions Data Manipulation Laguage (DML) - inserts, updates, and deletes data from DB","title":"4 Types of Languages in SQL:"},{"location":"databases/sql/#keys","text":"Primary Key - attribute that is unique for each row in the table Surrogate Key - type of primary key that has no mapping to anything in the real world Natural Key - type of primary key that has a mapping to the real world (e.g. SSN) Foreign Key - stores the primary key of a row in another database table (Link to another table) Can define relationships between tables or within a table Composite Key - type of primary key that is made up of two attributes Used when either of the attributes on their own do not uniquely identify a row","title":"Keys"},{"location":"databases/sql/#datatypes","text":"INT DECIMAL(M,N) -- m: total # digits, n: # digits after decimal place VARCHAR(L) -- String of text of max length L BLOB -- Binary large objects, stores large data like images DATE -- 'YYYY-MM-DD' TIMESTAMP -- 'YYYY-MM-DD HH:MM:SS'","title":"Datatypes"},{"location":"databases/sql/#functions","text":"--Find Num of Students SELECT COUNT(student_id) FROM students; --Find Num of female student born after 1980 SELECT COUNT(student_id) FROM students WHERE sex = 'F' AND birth_date > '1981-01-01'; --Find avg male salary SELECT AVG(salary) FROM employees WHERE sex = 'M'; --Find sum of all salaries SELECT SUM(salary) FROM employees; --Find num of males & females SELECT COUNT(sex), sex FROM employe GROUP BY sex; --Group By command used for aggregation","title":"Functions"},{"location":"databases/sql/#queries","text":"SELECT student.name AS forename, student.major FROM student ORDER BY name DESC --Descending alphabetical order LIMIT 20; --limits # of entries returned -- Comparison Operators: <, >, <=, >=, =, AND, OR, <> (not equal to)","title":"Queries"},{"location":"databases/sql/#tables","text":"CREATE TABLE student ( student_id INT AUTO_INCREMENT, -- you don't have to insert a primary key b/c its auto incremented name VARCHAR(20) UNIQUE, major VARCHAR(20) DEFAULT 'undecided', PRIMARY KEY(student_id) ); -- Delete a Table DROP TABLE student; --Show the table schema DESCRIBE student; -- Add & Drop Attributes ALTER TABLE student ADD gpa DECIMAL(3,2); ALTER TABLE student DROP COLUMN gpa;","title":"Tables"},{"location":"databases/sql/#insert-update-delete","text":"INSERT INTO student VALUES(1,'Jack','Biology'); INSERT INTO student(name) VALUES('Kate'); UPDATE student SET major = 'Computer Science and Engineering' WHERE major = 'Computer Science' OR major = 'Computer Engineering'; DELETE FROM student WHERE student_id > 100;","title":"Insert, Update, Delete"},{"location":"hardware/3d-printing/","text":"3D Modeling and Printing Process Design or download a model (.stl file) Import the stl file(s) to slicing software (e.g. IdeaMaker) Slice the object Slicing takes the model and does the math on it to create gcode instructions for the 3D printer Export the gcode instructions to a usb drive or SD card depending on the printer Plug in drive to printer and begin the 3D print Notes PLA is a common plastic used b/c it is softer (less wear & tear on printer) and needs less heat to be melted ABS is a harder plastic that is used and thus requires more heat to melt it A variety of different filaments can be used to print things Tiny errors in a 3D printer\u2019s movement results in big errors with the print b/c movements are done hundreds of times","title":"3D Printing"},{"location":"hardware/3d-printing/#3d-modeling-and-printing","text":"","title":"3D Modeling and Printing"},{"location":"hardware/3d-printing/#process","text":"Design or download a model (.stl file) Import the stl file(s) to slicing software (e.g. IdeaMaker) Slice the object Slicing takes the model and does the math on it to create gcode instructions for the 3D printer Export the gcode instructions to a usb drive or SD card depending on the printer Plug in drive to printer and begin the 3D print","title":"Process"},{"location":"hardware/3d-printing/#notes","text":"PLA is a common plastic used b/c it is softer (less wear & tear on printer) and needs less heat to be melted ABS is a harder plastic that is used and thus requires more heat to melt it A variety of different filaments can be used to print things Tiny errors in a 3D printer\u2019s movement results in big errors with the print b/c movements are done hundreds of times","title":"Notes"},{"location":"hardware/raspberry-pi/","text":"Raspberry Pi Board Structure Set of GPIO pins (General purpose input-output pins) Read More Serial pin on TX (GPIO14) and RX (GPIO15) Can print out this and place on pi for reference Interactive GPIO Guide Pi Camera Watch out, static can kill it FIX PI CAMERA DETECTION ERROR by enabling the I2C Interface in preferences --> raspberry pi configuration","title":"Raspberry Pi"},{"location":"hardware/raspberry-pi/#raspberry-pi","text":"","title":"Raspberry Pi"},{"location":"hardware/raspberry-pi/#board-structure","text":"Set of GPIO pins (General purpose input-output pins) Read More Serial pin on TX (GPIO14) and RX (GPIO15) Can print out this and place on pi for reference Interactive GPIO Guide","title":"Board Structure"},{"location":"hardware/raspberry-pi/#pi-camera","text":"Watch out, static can kill it FIX PI CAMERA DETECTION ERROR by enabling the I2C Interface in preferences --> raspberry pi configuration","title":"Pi Camera"},{"location":"machine_learning/activation_functions/","text":"Activation Functions Mathematical equations that determine the output of a node/neuron in a neural network Determines whether each neuron should be activated based on the neuron's input and the specific activation function Normalize the output of a neuron to a range: [0,1] or [-1,1] Must be computationally efficient b/c they are calculated across thousands or millions of neurons for each pass Having a computationally efficient derivative is good too for backpropagation Can be as simple as a step function that turns the neuron output on or off (e.g. 0 or 1) Binary Step Function (Doesn't allow multi-value outputs so it can't do multi-class classification) Can be a trasnformation that maps input signals to output signals Linear activations functions collapse a neural network into one layer b/c a linear combination of linear functions is still a linear function (not very useful) Can't use backpropagation with linear activation functions b/c the derivative is a constant so its impossible to see the effect of changing weights Non-linear activation functions allow the neural network to learn more complex data like images, videos, and audio Allow backpropagation b/c the derivative function is related to the inputs Allow sacking of multiple hidden layers unlike linear activation functions Most all processes can be modeled by a neural network w/ nonlinear activation functions Sigmoid/Logistic $\\sigma(x) = \\dfrac{1}{1 + e^{-x}}$ $\\dfrac{d}{dx}\\sigma(x) = \\sigma(x)(1 - \\sigma(x))$ Pros: Smooth Gradient prevents jumps in the output values Output vaues bound btw 0 and 1, normalizing the each neuron's output Clear predictions - any values above 2 or below -2 are very close to the edge of the curve Cons: Vanishing Gradient- almost no change in the prediction for very high and very low input values Can result in the network refusing to learn further or being too slow to reach an accurate prediction Outputs not zero centered Computationally expensive Detailed Derivation: $$ \\begin{align}\\dfrac{d}{dx} \\sigma(x) &= \\dfrac{d}{dx} \\left[ \\dfrac{1}{1 + e^{-x}} \\right] \\ &= \\dfrac{d}{dx} \\left( 1 + \\mathrm{e}^{-x} \\right)^{-1} \\ &= -(1 + e^{-x})^{-2}(-e^{-x}) \\ &= \\dfrac{e^{-x}}{\\left(1 + e^{-x}\\right)^2} \\ &= \\dfrac{1}{1 + e^{-x}\\ } \\cdot \\dfrac{e^{-x}}{1 + e^{-x}} \\ &= \\dfrac{1}{1 + e^{-x}\\ } \\cdot \\dfrac{(1 + e^{-x}) - 1}{1 + e^{-x}} \\ &= \\dfrac{1}{1 + e^{-x}\\ } \\cdot \\left( \\dfrac{1 + e^{-x}}{1 + e^{-x}} - \\dfrac{1}{1 + e^{-x}} \\right) \\ &= \\dfrac{1}{1 + e^{-x}\\ } \\cdot \\left( 1 - \\dfrac{1}{1 + e^{-x}} \\right) \\ &= \\sigma(x) \\cdot (1 - \\sigma(x)) \\end{align} $$ TanH/ Hyperbolic Tangent Similar in advantages and disadvantages except it has the advantage of being zero centered , making it easier to models input that have strongly negative, neutral, and strongly positive values ReLU (Rectified Linear Unit) Pros: Computationally efficient - allows the network to converge quickly Non-linear - although it seems lik e a lienar function, its derivative allows for backpropagation Cons: The Dying ReLU problem - as inputs approach zero or are negative, the gradient becomes zero, so the network can't perform backpropagation and therefore cannot learn Leaky ReLU Pros: Prevents dying ReLU problem - the smallpositive slope in the negative area enables backpropagation for negative inputs Otherwise like ReLU Cons: Inconsistent Results - does't provide consistent predicitions for negative input values https://missinglink.ai/guides/neural-network-concepts/7-types-neural-network-activation-functions-right/","title":"Activation Functions"},{"location":"machine_learning/activation_functions/#activation-functions","text":"Mathematical equations that determine the output of a node/neuron in a neural network Determines whether each neuron should be activated based on the neuron's input and the specific activation function Normalize the output of a neuron to a range: [0,1] or [-1,1] Must be computationally efficient b/c they are calculated across thousands or millions of neurons for each pass Having a computationally efficient derivative is good too for backpropagation Can be as simple as a step function that turns the neuron output on or off (e.g. 0 or 1) Binary Step Function (Doesn't allow multi-value outputs so it can't do multi-class classification) Can be a trasnformation that maps input signals to output signals Linear activations functions collapse a neural network into one layer b/c a linear combination of linear functions is still a linear function (not very useful) Can't use backpropagation with linear activation functions b/c the derivative is a constant so its impossible to see the effect of changing weights Non-linear activation functions allow the neural network to learn more complex data like images, videos, and audio Allow backpropagation b/c the derivative function is related to the inputs Allow sacking of multiple hidden layers unlike linear activation functions Most all processes can be modeled by a neural network w/ nonlinear activation functions","title":"Activation Functions"},{"location":"machine_learning/activation_functions/#sigmoidlogistic","text":"$\\sigma(x) = \\dfrac{1}{1 + e^{-x}}$ $\\dfrac{d}{dx}\\sigma(x) = \\sigma(x)(1 - \\sigma(x))$ Pros: Smooth Gradient prevents jumps in the output values Output vaues bound btw 0 and 1, normalizing the each neuron's output Clear predictions - any values above 2 or below -2 are very close to the edge of the curve Cons: Vanishing Gradient- almost no change in the prediction for very high and very low input values Can result in the network refusing to learn further or being too slow to reach an accurate prediction Outputs not zero centered Computationally expensive Detailed Derivation: $$ \\begin{align}\\dfrac{d}{dx} \\sigma(x) &= \\dfrac{d}{dx} \\left[ \\dfrac{1}{1 + e^{-x}} \\right] \\ &= \\dfrac{d}{dx} \\left( 1 + \\mathrm{e}^{-x} \\right)^{-1} \\ &= -(1 + e^{-x})^{-2}(-e^{-x}) \\ &= \\dfrac{e^{-x}}{\\left(1 + e^{-x}\\right)^2} \\ &= \\dfrac{1}{1 + e^{-x}\\ } \\cdot \\dfrac{e^{-x}}{1 + e^{-x}} \\ &= \\dfrac{1}{1 + e^{-x}\\ } \\cdot \\dfrac{(1 + e^{-x}) - 1}{1 + e^{-x}} \\ &= \\dfrac{1}{1 + e^{-x}\\ } \\cdot \\left( \\dfrac{1 + e^{-x}}{1 + e^{-x}} - \\dfrac{1}{1 + e^{-x}} \\right) \\ &= \\dfrac{1}{1 + e^{-x}\\ } \\cdot \\left( 1 - \\dfrac{1}{1 + e^{-x}} \\right) \\ &= \\sigma(x) \\cdot (1 - \\sigma(x)) \\end{align} $$","title":"Sigmoid/Logistic"},{"location":"machine_learning/activation_functions/#tanh-hyperbolic-tangent","text":"Similar in advantages and disadvantages except it has the advantage of being zero centered , making it easier to models input that have strongly negative, neutral, and strongly positive values","title":"TanH/ Hyperbolic Tangent"},{"location":"machine_learning/activation_functions/#relu-rectified-linear-unit","text":"Pros: Computationally efficient - allows the network to converge quickly Non-linear - although it seems lik e a lienar function, its derivative allows for backpropagation Cons: The Dying ReLU problem - as inputs approach zero or are negative, the gradient becomes zero, so the network can't perform backpropagation and therefore cannot learn","title":"ReLU (Rectified Linear Unit)"},{"location":"machine_learning/activation_functions/#leaky-relu","text":"Pros: Prevents dying ReLU problem - the smallpositive slope in the negative area enables backpropagation for negative inputs Otherwise like ReLU Cons: Inconsistent Results - does't provide consistent predicitions for negative input values https://missinglink.ai/guides/neural-network-concepts/7-types-neural-network-activation-functions-right/","title":"Leaky ReLU"},{"location":"machine_learning/reinforcement_learning/","text":"Reinforcement Learning - the science of learning to make decisions from interaction Differs from other machine learning paradigms in that: No supervision, only a reward signal Feedback can be delayed, not instantaneous Time matters Earlier decisions affect later interactions Sequential decision problems can be solved w/ RL RL is a framework for how to think about these problems as well as a set of algorithms that can be used to solved these problems Core Concepts: Environment Reward Signal External to the learning algorithm even if its internal to the learning system as a whole Agent containing: Agent state Policy Value function (probably) Model (optionally) Rewards A reward $R_t$ is a scalar feedback signal Indicates how well agent is doing at step t The agent's job is to maximize cumulative reward $G_t = R_{t+1} + R_{t+2} + ...$ RL is based on the reward hypothesis Any goal can be formalized as the outcome of maximizing a cumulative reward Dense- reward on every step Sparse- reward only when the desired event happens Can be negative or positive rewads (Carrot vs. Stick in helping train the algorithm) Values Value - the expected cumulative reward from state $s$ States use the v function to find their value $v(s) = E[G_t | S_t = s]$ where $G_t = R_{t+1} + R_{t+2} + ...$ Goal is to maximize value by picking suitable actions Rewards and values define desirability of state or acton Returns and values can be defined recursively $G_t = R_{t+1} + G_{t+1}$ Actions Goal: Select actions to maximize value Actions may have long term consequences meaning rewards may be delayed Might be better to sacrific immediate reward to gain more long-term reward Ex: Financial investments might take months to mature Blocking opponent moves might help winning chances many moves in the future Policy - a mapping from states to actions Action Values It is possible to condition the value on actions $q(s,a) = E[G_t | S_t = s, A_t = a]$ State action pairs use the Q-function to find their value Agent Components Agent State Policy Value Function Model State Actions depend on the state of the agent Both agent and environment may have an internal state In the simplest case, there is only one shared state by the environemnt and agent Often there are multiple (sometimes infinite) different states The agent's state is usually different than the environment's state The agent might not know the full state of the environment Environment State The environment's internal state Usually not visible to the agent May contain lots of irrelevant information if visible Agent State A history is a sequence of observations, action, rewards $H_t = O_0,A_0,R_1,O_1,...,O_{t-1},A_{t-1},R_t,O_t$ The agent state $S_t$ can be constructed from the history and is considerd to be a function of the history $S_{t+1} = f(S_t,A_t,R_{t+1},O_{t+1})$ where $f$ is a state update function Means the next agent state is dependent on the current agent state, the action taken, the reward, and the observation A simple update function can be concatinating the previous states together to create the current state (Done w/ the Atari game agents by cocatenating frames together since frames are the state) Actions depend on this state Agent state is typically much smaller than the environment state and the full history Fully Observable Environments When the agent sees the full environment state observation = environment state Agent state could just be the observation $S_t = O_t = environment state$ Then the agent is in a Markov Decision Process Ex: Single player board games in which the player can see the entire board Smart Pong is an example of fully observable environment (VERIFY) Markov Decision Processes MDPs provide a useful mathematical framework for talking about many RL topics Easier to reason about than the full problem (long markovian) Limited b/c of markov assumption Def- A decision process is Markov if the future is independent of the past given the present $H_t => S_t => H_{t+1}$ Once the current state ($S_t$) is known , the history ($H_t$) may be thrown away (useful for space consideration) The current state gives enough information for the next state to be predicted The environment state is typically Markov The history is Markov Partially Observable Environments The agent gets parial information A robot w/ camera vision doesn't have its absolute location A poker playing agent only observes public cards Now the observation is not Markov Formally this is a partially observable Markov decision process (POMDP) The environment state can still be markov, but the agent does not know it The state should contain enough information for good policies/value predictions Policy Defines the agent's behavior A map from agent state to action Deterministic Policy - function that outputs an action based on an input agent state Stochastic Policy - a probability of selecting each action in each state Value Function: The actual value function is the expected return $V_\\pi(s)=E[G_t|S_t=s,\\pi]$ \u200b $ = E[R_{t+1}+\\gamma R_{t+2}+\\gamma^2R_{t+3}+... | S_t = s,\\pi]$ The return has a recursive form since $G_t = R_{t+1}+\\gamma G_{t+1}$ Bellman Equation : $V_\\pi (s) = E[R_{t+1} + \\gamma G_{t+1} | S_t = s,A_t \\sim \\pi (s)]$ where $a \\sim \\pi (s)$ means action $a$ is chosen by policy $\\pi$ in state $s$ Discount Factor ($\\gamma \\in [0,1]$) trades off importance of immediate vs. long-term rewards Closer to 1 means higher importane on immediate rewards (AKA discounting future rewards in favor of immediate rewards) The value depends on the policy Can be used to evaluate desirability of states Can be used to select btw actions","title":"Reinforcement learning"},{"location":"machine_learning/reinforcement_learning/#core-concepts","text":"Environment Reward Signal External to the learning algorithm even if its internal to the learning system as a whole Agent containing: Agent state Policy Value function (probably) Model (optionally)","title":"Core Concepts:"},{"location":"machine_learning/reinforcement_learning/#rewards","text":"A reward $R_t$ is a scalar feedback signal Indicates how well agent is doing at step t The agent's job is to maximize cumulative reward $G_t = R_{t+1} + R_{t+2} + ...$ RL is based on the reward hypothesis Any goal can be formalized as the outcome of maximizing a cumulative reward Dense- reward on every step Sparse- reward only when the desired event happens Can be negative or positive rewads (Carrot vs. Stick in helping train the algorithm)","title":"Rewards"},{"location":"machine_learning/reinforcement_learning/#values","text":"Value - the expected cumulative reward from state $s$ States use the v function to find their value $v(s) = E[G_t | S_t = s]$ where $G_t = R_{t+1} + R_{t+2} + ...$ Goal is to maximize value by picking suitable actions Rewards and values define desirability of state or acton Returns and values can be defined recursively $G_t = R_{t+1} + G_{t+1}$","title":"Values"},{"location":"machine_learning/reinforcement_learning/#actions","text":"Goal: Select actions to maximize value Actions may have long term consequences meaning rewards may be delayed Might be better to sacrific immediate reward to gain more long-term reward Ex: Financial investments might take months to mature Blocking opponent moves might help winning chances many moves in the future Policy - a mapping from states to actions","title":"Actions"},{"location":"machine_learning/reinforcement_learning/#action-values","text":"It is possible to condition the value on actions $q(s,a) = E[G_t | S_t = s, A_t = a]$ State action pairs use the Q-function to find their value","title":"Action Values"},{"location":"machine_learning/reinforcement_learning/#agent-components","text":"Agent State Policy Value Function Model","title":"Agent Components"},{"location":"machine_learning/reinforcement_learning/#state","text":"Actions depend on the state of the agent Both agent and environment may have an internal state In the simplest case, there is only one shared state by the environemnt and agent Often there are multiple (sometimes infinite) different states The agent's state is usually different than the environment's state The agent might not know the full state of the environment","title":"State"},{"location":"machine_learning/reinforcement_learning/#environment-state","text":"The environment's internal state Usually not visible to the agent May contain lots of irrelevant information if visible","title":"Environment State"},{"location":"machine_learning/reinforcement_learning/#agent-state","text":"A history is a sequence of observations, action, rewards $H_t = O_0,A_0,R_1,O_1,...,O_{t-1},A_{t-1},R_t,O_t$ The agent state $S_t$ can be constructed from the history and is considerd to be a function of the history $S_{t+1} = f(S_t,A_t,R_{t+1},O_{t+1})$ where $f$ is a state update function Means the next agent state is dependent on the current agent state, the action taken, the reward, and the observation A simple update function can be concatinating the previous states together to create the current state (Done w/ the Atari game agents by cocatenating frames together since frames are the state) Actions depend on this state Agent state is typically much smaller than the environment state and the full history","title":"Agent State"},{"location":"machine_learning/reinforcement_learning/#fully-observable-environments","text":"When the agent sees the full environment state observation = environment state Agent state could just be the observation $S_t = O_t = environment state$ Then the agent is in a Markov Decision Process Ex: Single player board games in which the player can see the entire board Smart Pong is an example of fully observable environment (VERIFY)","title":"Fully Observable Environments"},{"location":"machine_learning/reinforcement_learning/#markov-decision-processes","text":"MDPs provide a useful mathematical framework for talking about many RL topics Easier to reason about than the full problem (long markovian) Limited b/c of markov assumption Def- A decision process is Markov if the future is independent of the past given the present $H_t => S_t => H_{t+1}$ Once the current state ($S_t$) is known , the history ($H_t$) may be thrown away (useful for space consideration) The current state gives enough information for the next state to be predicted The environment state is typically Markov The history is Markov","title":"Markov Decision Processes"},{"location":"machine_learning/reinforcement_learning/#partially-observable-environments","text":"The agent gets parial information A robot w/ camera vision doesn't have its absolute location A poker playing agent only observes public cards Now the observation is not Markov Formally this is a partially observable Markov decision process (POMDP) The environment state can still be markov, but the agent does not know it The state should contain enough information for good policies/value predictions","title":"Partially Observable Environments"},{"location":"machine_learning/reinforcement_learning/#policy","text":"Defines the agent's behavior A map from agent state to action Deterministic Policy - function that outputs an action based on an input agent state Stochastic Policy - a probability of selecting each action in each state","title":"Policy"},{"location":"machine_learning/reinforcement_learning/#value-function","text":"The actual value function is the expected return $V_\\pi(s)=E[G_t|S_t=s,\\pi]$ \u200b $ = E[R_{t+1}+\\gamma R_{t+2}+\\gamma^2R_{t+3}+... | S_t = s,\\pi]$ The return has a recursive form since $G_t = R_{t+1}+\\gamma G_{t+1}$ Bellman Equation : $V_\\pi (s) = E[R_{t+1} + \\gamma G_{t+1} | S_t = s,A_t \\sim \\pi (s)]$ where $a \\sim \\pi (s)$ means action $a$ is chosen by policy $\\pi$ in state $s$ Discount Factor ($\\gamma \\in [0,1]$) trades off importance of immediate vs. long-term rewards Closer to 1 means higher importane on immediate rewards (AKA discounting future rewards in favor of immediate rewards) The value depends on the policy Can be used to evaluate desirability of states Can be used to select btw actions","title":"Value Function:"},{"location":"system_design/docker/","text":"Docker Tool for running applications in an isolated environment Advantages : Same environment (Works on all computers if it works on docker) Sandbox Projects (Keeps them separate: no conflicts & better security) Simple to get started on others' projects Containers : the building blocks of Docker Stop by themselves when the main process finishes/exits (e.g. php or node.js dies) Should be one process per container b/c the life of the container is tied to that process Lightweight so lots of containers can be run on a computer at a time Docker vs. Virutal Machines Docker is less resource heavy than a virtual machine so it is faster than a VM Docker Images A Dockerfile is a file with a list of steps to create the image A Docker Image is a template for creating a desired environment and includes an OS, software, and application code A Docker Container is a running instance of a docker image Setting up a Docker Project Create Dockerfile in the root of the project/services directory (outside src folder) Where we will start from an existing image and build on top of it Can find thousands of images on Dockerhub Write the instructions to build your image in the Dockerfile FROM specifies the starting/base image to be downloaded from Dockerhub (Must be the 1st line) COPY copies the files from the first directory to the second location inside the image (specified in image's documentation) EXPOSE tells running containers to listen on the specified port FROM php:7-0-apache COPY src/ /var/www/html EXPOSE 80 Build the docker image from the terminal -t image-name specifies the image's name location is the path to the Dockerfile which is . if in the same directory docker build -t image-name location Run the docker container from the terminal -p 80:80 forwards port 80 in the host to port 80 in the container which was exposed in the docker file, allowing it to accept the request so that the code in the container can handle the request docker run -p 80:80 image-name Volumes One type allows the sharing of data between containers The other type allows the sharing of folders between the host and the container Useful for development since any changes to source code doesn't require a new image to be built and new container to be spun up Will need to rebuild the image to deploy it to somewhere else b/c volumes just give the ability for a container to see files on the host's filesystem, volumes don't change the image Building an image from a Dockerfile copies the src code so that it can be deployed elsewhere Mounting a volume is done when running the container Must use absolute paths of folders to be mounted docker run -p80:80 -v /Users/admin/project/src/:/var/www/html/ image-name Extra: FROM python:3-onbuild COPY . /usr/src/app CMD [\"python\",\"api.py\"] Docker Compose Lets you define all you services/containers in a configuration file With one command, all the containers can be spun up The configuration files save the hassel of writing the docker run commands for each container with all their specifications for volumes and ports Creates a virtual network for all the containers allowing communication for all the containers specified in the docker-compose file The host names of the containers match the service names defined in docker-compose.yml Setting up a Project w/ Docker Compose Create docker-compose.yml in root directory of project Write the configuration instructions in docker-compose.yml Directories are relative to where the docker-compose file is version specifies the version of docker-compose file format that you will be writing in (the formats are often updated so this helps specify what syntax you will be using) build takes ther relative path to the Dockerfile for a container volumes & ports allows you to list the volumes and ports for that docker image depends_on allows you to specify other services necessary for the service to run version: '3' services: product-service: build: ./product volumes: - ./product:/usr/src/app ports: - 5001:80 website: image: php:apache volumes: - ./website:/var/www/html ports: - 5000:80 depends_on: - product-service Spin up the containers running docker-compose up from the terminal from the directory where the docker-compose file is located Will build all the images and then run all the containers Running docker-compose up -d will spin up the containers in detached mode meaning you can continue working on the terminal run docker ps to see the status of the containers in detached mode run docker-compose stop to stop the containers in detached mode (ctr + c works in nondetached mode)","title":"Docker"},{"location":"system_design/docker/#docker","text":"Tool for running applications in an isolated environment Advantages : Same environment (Works on all computers if it works on docker) Sandbox Projects (Keeps them separate: no conflicts & better security) Simple to get started on others' projects Containers : the building blocks of Docker Stop by themselves when the main process finishes/exits (e.g. php or node.js dies) Should be one process per container b/c the life of the container is tied to that process Lightweight so lots of containers can be run on a computer at a time","title":"Docker"},{"location":"system_design/docker/#docker-vs-virutal-machines","text":"Docker is less resource heavy than a virtual machine so it is faster than a VM","title":"Docker vs. Virutal Machines"},{"location":"system_design/docker/#docker-images","text":"A Dockerfile is a file with a list of steps to create the image A Docker Image is a template for creating a desired environment and includes an OS, software, and application code A Docker Container is a running instance of a docker image","title":"Docker Images"},{"location":"system_design/docker/#setting-up-a-docker-project","text":"Create Dockerfile in the root of the project/services directory (outside src folder) Where we will start from an existing image and build on top of it Can find thousands of images on Dockerhub Write the instructions to build your image in the Dockerfile FROM specifies the starting/base image to be downloaded from Dockerhub (Must be the 1st line) COPY copies the files from the first directory to the second location inside the image (specified in image's documentation) EXPOSE tells running containers to listen on the specified port FROM php:7-0-apache COPY src/ /var/www/html EXPOSE 80 Build the docker image from the terminal -t image-name specifies the image's name location is the path to the Dockerfile which is . if in the same directory docker build -t image-name location Run the docker container from the terminal -p 80:80 forwards port 80 in the host to port 80 in the container which was exposed in the docker file, allowing it to accept the request so that the code in the container can handle the request docker run -p 80:80 image-name","title":"Setting up a Docker Project"},{"location":"system_design/docker/#volumes","text":"One type allows the sharing of data between containers The other type allows the sharing of folders between the host and the container Useful for development since any changes to source code doesn't require a new image to be built and new container to be spun up Will need to rebuild the image to deploy it to somewhere else b/c volumes just give the ability for a container to see files on the host's filesystem, volumes don't change the image Building an image from a Dockerfile copies the src code so that it can be deployed elsewhere Mounting a volume is done when running the container Must use absolute paths of folders to be mounted docker run -p80:80 -v /Users/admin/project/src/:/var/www/html/ image-name","title":"Volumes"},{"location":"system_design/docker/#extra","text":"FROM python:3-onbuild COPY . /usr/src/app CMD [\"python\",\"api.py\"]","title":"Extra:"},{"location":"system_design/docker/#docker-compose","text":"Lets you define all you services/containers in a configuration file With one command, all the containers can be spun up The configuration files save the hassel of writing the docker run commands for each container with all their specifications for volumes and ports Creates a virtual network for all the containers allowing communication for all the containers specified in the docker-compose file The host names of the containers match the service names defined in docker-compose.yml","title":"Docker Compose"},{"location":"system_design/docker/#setting-up-a-project-w-docker-compose","text":"Create docker-compose.yml in root directory of project Write the configuration instructions in docker-compose.yml Directories are relative to where the docker-compose file is version specifies the version of docker-compose file format that you will be writing in (the formats are often updated so this helps specify what syntax you will be using) build takes ther relative path to the Dockerfile for a container volumes & ports allows you to list the volumes and ports for that docker image depends_on allows you to specify other services necessary for the service to run version: '3' services: product-service: build: ./product volumes: - ./product:/usr/src/app ports: - 5001:80 website: image: php:apache volumes: - ./website:/var/www/html ports: - 5000:80 depends_on: - product-service Spin up the containers running docker-compose up from the terminal from the directory where the docker-compose file is located Will build all the images and then run all the containers Running docker-compose up -d will spin up the containers in detached mode meaning you can continue working on the terminal run docker ps to see the status of the containers in detached mode run docker-compose stop to stop the containers in detached mode (ctr + c works in nondetached mode)","title":"Setting up a Project w/ Docker Compose"},{"location":"system_design/microservices/","text":"Microservice Architectual Style: Developing a single application as a suite of small services, each running in its own process and communicating with lightweight mechanics, often an HTTP resource API Encourages modularity and seperation of concerns ability to horizontally scale and partition the workload Microservices contain many aspects in reality: Clients, Caches, and Databases are all included in a microservice in conjuction with the service itself Stateless Service: Not a cache or database Frequently accessed metadata no instance affinity Losing a node is not a big deal and can be easily fixed Stateful Service: Databases & caches Custom apps which holds lots of data Losing a node is a notable event and it might take hours to get it fixed","title":"Microservices"},{"location":"system_design/microservices/#microservice-architectual-style","text":"Developing a single application as a suite of small services, each running in its own process and communicating with lightweight mechanics, often an HTTP resource API Encourages modularity and seperation of concerns ability to horizontally scale and partition the workload Microservices contain many aspects in reality: Clients, Caches, and Databases are all included in a microservice in conjuction with the service itself","title":"Microservice Architectual Style:"},{"location":"system_design/microservices/#stateless-service","text":"Not a cache or database Frequently accessed metadata no instance affinity Losing a node is not a big deal and can be easily fixed","title":"Stateless Service:"},{"location":"system_design/microservices/#stateful-service","text":"Databases & caches Custom apps which holds lots of data Losing a node is a notable event and it might take hours to get it fixed","title":"Stateful Service:"},{"location":"web_dev/html-css/sass/","text":"Sass h1, h2, h3 { //Equivalent to h1.lg-heading &.lg-heading{} //Affects any nested elements w/in h1/h2/h3 with the specified class name .lg-heading{} } 6rem is 6 times the rem unit rem unit is a multiplier of the html tag's font size (default is 16 pixels) z-index is how close an element is to you (layering) //Allows the same transition to be used uniformly throughout a file @mixin easeOut(){ transition: all 0.5s ease-out; } a { //& uses the element it is nested in &:hover { color: $secondary-color @include easeOut(); } } vh & vw slice the screen into numerous slices of height and width 100 vh and 100 vw takes up whole screen 10 vh takes 10 slices of the height rgba(color,opacity) Sets the color and opacity for a property stands for red green blue alpha","title":"Sass"},{"location":"web_dev/html-css/sass/#sass","text":"h1, h2, h3 { //Equivalent to h1.lg-heading &.lg-heading{} //Affects any nested elements w/in h1/h2/h3 with the specified class name .lg-heading{} } 6rem is 6 times the rem unit rem unit is a multiplier of the html tag's font size (default is 16 pixels) z-index is how close an element is to you (layering) //Allows the same transition to be used uniformly throughout a file @mixin easeOut(){ transition: all 0.5s ease-out; } a { //& uses the element it is nested in &:hover { color: $secondary-color @include easeOut(); } } vh & vw slice the screen into numerous slices of height and width 100 vh and 100 vw takes up whole screen 10 vh takes 10 slices of the height rgba(color,opacity) Sets the color and opacity for a property stands for red green blue alpha","title":"Sass"},{"location":"web_dev/js/basics/","text":"What is JavaScript Dynamic Programming Language (operations done at run-time) E.g. Possible to change variable type or add new properties/methods to an object while the program is running Dynamically-Typed Language (Interpreter assigns variables a type at runtime based on its current value) Can provide interactivity on websites when applied to an html document Interpreted language (Doesn't have to be compiled) Runs on the client's computer/browser Object Based Prototype based instead of class based like Java Scripting language (lightweight) Uses for JavaScript: Put content in an HTML page on the fly Make webpages responsive Detect a user's browser and other info Create cookies Validate forms Create animations, slideshows, scrollers, etc Build apps w/ JS frameworks (ex: angularJS, reactJS, etc) Primitive Data Types Number- integers and decimals String- use single or double quotes (single preferred) .length property Boolean- true or false Null- intentional absence of a value represnted by null Undefined- absence of a valuae represented by undefined and is different than null Symbol- unique identifiers and useful in more complex coding Variables When declaring variables without assigning a value, their inital value is set to undefined Prior to ES6, var was the only keyword to declare variables ( More Info ) Variables declared using var are created before any code is executed in a process known as hoisting A variable's initial value is undefined and its actual value is intialized when the assignment statement is reached in execution This means a variable can be used before it is declared in the code since hoisting results in the equivalent of all variables being declared at the top In ES6, let and const were introduced let signals that the variable can be reassigned a different value const signals that the variable is a constant and cannot be reassigned Reassigning a const will throw a TypeError Variables can be transformed using mathematical asignment operators ( += , *= , /= ) and increment/decrement operators ( ++ , -- ) In ES6, we can insert (or interpolate) variables into strings using template literals Uses backticks instead of single/double quotes const myPet = 'armadillo'; console.log(`I own a pet ${myPet}`); // Output: I own a pet armadillo. typeof operator will return a string of the data type of the value to its right (e.g. typeof 'hello' returns 'string') Conditional Statements if (greeting) { console.log('Hello World!') } else if (goodbye){ console.log('Bye World!') } else { console.log('IDK') } Comparison Operators: < , > , <= , >= , === , !== Don't use == or != b/c types are not considered (Read More) Logical Operators: and && , or || , not: ! Values that are not explicitly true/false but evaluate to true/false are called truthy/falsy Falsy: 0 ,empty strings, null , undefined , NaN Truthy: If a variable's value exists, it evaluates to true in a logical comparison let defaultName; if (username) { defaultName = username; } else { defaultName = 'Stranger'; } //Is equivalent to let defaultName = username || 'Stranger'; //Stranger is the default if usrname is falsy (DNE) A ternary operator can condense if...else statements If the condition before the ? is true, the 1st expression executes. If false, the 2nd expression executes let isNight = true; if (isNight){ console.log('Sleep') } else { console.log('Wakeup') } //Is equivalent to: isNight ? console.log('Sleep') : console.log('Wakeup'); Supports switch statements for easier syntax than numerous else if statements let item = 'Pie' switch (item) { case 'bread': //Do something break; case 'muffin': //Do something else break; default: //Last resort break; } Functions Hoisting applies to functions as well, allowing a function to be called before it is defined in the code Not good code practice though A function declaration binds a function to an identifier like getUser() using the function keyword ES6 added the ability to use default parameters function calcArea(width,height=10){ return width * height; } Helper functions- functions called within another function Function Expressions are another way to define a function The anonymous functions created by function expressions are stored in variables so they can be referenced const is used to declare the variable const calcArea = function(width,height){ return width * height; } ES6 introduced arrow function syntax as a shorter way to write functions (Documentation) Remove the need to type out the function keyword Include parameters inside the parentheses and add an arrow => pointing to the function body const calcArea = (width,height) => { return width * height; } Conscise Body Arrow Functions Functions taking 1 parameter don't need parentheses but 0 & 2+ parameters require parentheses Pushing the function to the single-line eliminates need for curly braces and return statement (implicitly returns the contents of the block) const sumNums = num => num + num; //Will return num + num Scope Defines where variablescan be accessed or referenced In block scope variables are declared inside a block (set of {} ) and are called local variables Local variables can only be accessed within the block In global scope variables are declared outside of a block and are called global variables Global variables can be accessed by any code in the program The global namespace is where global variables go and it allows them to be accessed anywhere in the program Scope Pollution occurs when too many global variables exist in the global namespace or when variables are reused across different scopes Best practice not to define variables in the global scope to avoid this proble Scope variables as tightly as possible using block scope Makes code more legible & understandable since blocks organize the code into discrete sections Easier to maintain the modular code Saves memory b/c the variables are automatically erased after the block is finished running Arrays Documentation Can store any combination of data types( const list = ['Hello',45,true] ) Traditional array access & updates( list[0] and list[1] = 56 ) Can change the contents of an array declared with const but cannot reassign a new array or different value to the variable .length property just like strings .push(item) adds items to the end of an array & .unshift(item) adds items to the beginning ofan array Can take multipe arguments to add multiple items at a time Changes/mutates the original array (Also classified as a destructive array method since it changes the initial array ) .pop() removes the last item of an array & .shift() removes the first item (Neither take any arguments) Changes/mutates the original array .indexOf(item) returns the index of an item in the array (not found = -1) .slice() copies an array ( let copy = og.slice(); ) .splice(pos,n) removes the item at pos n times Changes the original array and returns the removed items as another array Pass-by-Reference is when an array is passed into a function, if the array is mutated inside the function, that change will be maintained outside the function as well Works because the argument to the function is just a reference to where the variable is stored in memory, allowing the memory of the array to be changed Nested arrays can be accessed by chaining on more bracket notation with index values (e.g. arry[1][3] ) let nums = [1,5,7,3,9]; let num2 = new Array(1,3,6,'Hi',3,7); nums.push(10); nums.length num2.sort() //Strings come last nums.reverse() //Reverses order Loops for loop consists of an initialization, stopping condition, and iteration statement Do while loops run a piece of code then check the condition compared to while loops that check the condition and then run the code Do while loops run at least once whether or not the condition evaluates to true break keyword allows programs to break out of a loop within the loop's block for (let i = 0; i < 5, i++){} for (let i = items.length - 1; i >= 0; i--){} //Reverse through a list while (condition) {} //Avoid infinite loops! do {} while (condition) Higher-Order Functions Functions that accept other functions as arguments and/or return functions as output Callback Functions are functions that are passed as arguments and invoked Get called during the excution of the higher-order function To pass a callback function as ana argument, the name is typed w/o the parentheses so that the reference to the function is passed, not the value from invoking the function Anonymous functions can be passed as arguments as well (they are defined in the higher-order function's call) Adds another level of abstraction to a program to make it more modular & easier to read/debug JS functions are first class objects meaning that like other objects, JS functions can have properties and methods Functions are special b/c they can be invoked and treated like any other type of data Every JS function is actually a Function object ( Documentation ) Iterators These iterators take a callback function as an argument and execute the callback function for each element in the array .forEach() const fruits = ['mango', 'papaya', 'pineapple', 'apple']; fruits.forEach(elem=>console.log(`I want to eat a ${elem}`)); //I want to eat a mango...papaya...etc. .map() returns a new array unlike forEach which mutates the original array const nums = [1,2,3,4]; const bigNums = nums.map(number => number * 10); //[10,20,30,40] .filter() takes a boolean callback function (returns T/F) as an argument. Returns a new array const favoriteWords = ['nostalgia', 'hyperbole', 'fervent', 'esoteric', 'serene']; const longFavoriteWords = favoriteWords.filter(elem=> { return elem.length > 7; }); .findIndex() Returns the index of the first element that evaluates to true in the boolean callback function No element that satisfies the callback returns -1 ``` javascript const jumbledNums = [123, 25, 78, 5, 9]; const lessThanTen = jumbledNums.findIndex(num => { return num < 10; }); //3 - `.reduce()` returns a single value after iterating through the elements of an array (Consists of an accumulator and iterator) - The optional 2nd argument sets the initial value for accumulator ```javascript const nums = [1,2,3,4]; const summedNums = nums.reduce((accumulator,currentVal) => { console.log('The value of accumulator: ', accumulator); console.log('The value of currentValue: ', currentValue); return accumulator + currentVal; },100); //110","title":"Basics"},{"location":"web_dev/js/basics/#what-is-javascript","text":"Dynamic Programming Language (operations done at run-time) E.g. Possible to change variable type or add new properties/methods to an object while the program is running Dynamically-Typed Language (Interpreter assigns variables a type at runtime based on its current value) Can provide interactivity on websites when applied to an html document Interpreted language (Doesn't have to be compiled) Runs on the client's computer/browser Object Based Prototype based instead of class based like Java Scripting language (lightweight)","title":"What is JavaScript"},{"location":"web_dev/js/basics/#uses-for-javascript","text":"Put content in an HTML page on the fly Make webpages responsive Detect a user's browser and other info Create cookies Validate forms Create animations, slideshows, scrollers, etc Build apps w/ JS frameworks (ex: angularJS, reactJS, etc)","title":"Uses for JavaScript:"},{"location":"web_dev/js/basics/#primitive-data-types","text":"Number- integers and decimals String- use single or double quotes (single preferred) .length property Boolean- true or false Null- intentional absence of a value represnted by null Undefined- absence of a valuae represented by undefined and is different than null Symbol- unique identifiers and useful in more complex coding","title":"Primitive Data Types"},{"location":"web_dev/js/basics/#variables","text":"When declaring variables without assigning a value, their inital value is set to undefined Prior to ES6, var was the only keyword to declare variables ( More Info ) Variables declared using var are created before any code is executed in a process known as hoisting A variable's initial value is undefined and its actual value is intialized when the assignment statement is reached in execution This means a variable can be used before it is declared in the code since hoisting results in the equivalent of all variables being declared at the top In ES6, let and const were introduced let signals that the variable can be reassigned a different value const signals that the variable is a constant and cannot be reassigned Reassigning a const will throw a TypeError Variables can be transformed using mathematical asignment operators ( += , *= , /= ) and increment/decrement operators ( ++ , -- ) In ES6, we can insert (or interpolate) variables into strings using template literals Uses backticks instead of single/double quotes const myPet = 'armadillo'; console.log(`I own a pet ${myPet}`); // Output: I own a pet armadillo. typeof operator will return a string of the data type of the value to its right (e.g. typeof 'hello' returns 'string')","title":"Variables"},{"location":"web_dev/js/basics/#conditional-statements","text":"if (greeting) { console.log('Hello World!') } else if (goodbye){ console.log('Bye World!') } else { console.log('IDK') } Comparison Operators: < , > , <= , >= , === , !== Don't use == or != b/c types are not considered (Read More) Logical Operators: and && , or || , not: ! Values that are not explicitly true/false but evaluate to true/false are called truthy/falsy Falsy: 0 ,empty strings, null , undefined , NaN Truthy: If a variable's value exists, it evaluates to true in a logical comparison let defaultName; if (username) { defaultName = username; } else { defaultName = 'Stranger'; } //Is equivalent to let defaultName = username || 'Stranger'; //Stranger is the default if usrname is falsy (DNE) A ternary operator can condense if...else statements If the condition before the ? is true, the 1st expression executes. If false, the 2nd expression executes let isNight = true; if (isNight){ console.log('Sleep') } else { console.log('Wakeup') } //Is equivalent to: isNight ? console.log('Sleep') : console.log('Wakeup'); Supports switch statements for easier syntax than numerous else if statements let item = 'Pie' switch (item) { case 'bread': //Do something break; case 'muffin': //Do something else break; default: //Last resort break; }","title":"Conditional Statements"},{"location":"web_dev/js/basics/#functions","text":"Hoisting applies to functions as well, allowing a function to be called before it is defined in the code Not good code practice though A function declaration binds a function to an identifier like getUser() using the function keyword ES6 added the ability to use default parameters function calcArea(width,height=10){ return width * height; } Helper functions- functions called within another function Function Expressions are another way to define a function The anonymous functions created by function expressions are stored in variables so they can be referenced const is used to declare the variable const calcArea = function(width,height){ return width * height; } ES6 introduced arrow function syntax as a shorter way to write functions (Documentation) Remove the need to type out the function keyword Include parameters inside the parentheses and add an arrow => pointing to the function body const calcArea = (width,height) => { return width * height; } Conscise Body Arrow Functions Functions taking 1 parameter don't need parentheses but 0 & 2+ parameters require parentheses Pushing the function to the single-line eliminates need for curly braces and return statement (implicitly returns the contents of the block) const sumNums = num => num + num; //Will return num + num","title":"Functions"},{"location":"web_dev/js/basics/#scope","text":"Defines where variablescan be accessed or referenced In block scope variables are declared inside a block (set of {} ) and are called local variables Local variables can only be accessed within the block In global scope variables are declared outside of a block and are called global variables Global variables can be accessed by any code in the program The global namespace is where global variables go and it allows them to be accessed anywhere in the program Scope Pollution occurs when too many global variables exist in the global namespace or when variables are reused across different scopes Best practice not to define variables in the global scope to avoid this proble Scope variables as tightly as possible using block scope Makes code more legible & understandable since blocks organize the code into discrete sections Easier to maintain the modular code Saves memory b/c the variables are automatically erased after the block is finished running","title":"Scope"},{"location":"web_dev/js/basics/#arrays","text":"Documentation Can store any combination of data types( const list = ['Hello',45,true] ) Traditional array access & updates( list[0] and list[1] = 56 ) Can change the contents of an array declared with const but cannot reassign a new array or different value to the variable .length property just like strings .push(item) adds items to the end of an array & .unshift(item) adds items to the beginning ofan array Can take multipe arguments to add multiple items at a time Changes/mutates the original array (Also classified as a destructive array method since it changes the initial array ) .pop() removes the last item of an array & .shift() removes the first item (Neither take any arguments) Changes/mutates the original array .indexOf(item) returns the index of an item in the array (not found = -1) .slice() copies an array ( let copy = og.slice(); ) .splice(pos,n) removes the item at pos n times Changes the original array and returns the removed items as another array Pass-by-Reference is when an array is passed into a function, if the array is mutated inside the function, that change will be maintained outside the function as well Works because the argument to the function is just a reference to where the variable is stored in memory, allowing the memory of the array to be changed Nested arrays can be accessed by chaining on more bracket notation with index values (e.g. arry[1][3] ) let nums = [1,5,7,3,9]; let num2 = new Array(1,3,6,'Hi',3,7); nums.push(10); nums.length num2.sort() //Strings come last nums.reverse() //Reverses order","title":"Arrays"},{"location":"web_dev/js/basics/#loops","text":"for loop consists of an initialization, stopping condition, and iteration statement Do while loops run a piece of code then check the condition compared to while loops that check the condition and then run the code Do while loops run at least once whether or not the condition evaluates to true break keyword allows programs to break out of a loop within the loop's block for (let i = 0; i < 5, i++){} for (let i = items.length - 1; i >= 0; i--){} //Reverse through a list while (condition) {} //Avoid infinite loops! do {} while (condition)","title":"Loops"},{"location":"web_dev/js/basics/#higher-order-functions","text":"Functions that accept other functions as arguments and/or return functions as output Callback Functions are functions that are passed as arguments and invoked Get called during the excution of the higher-order function To pass a callback function as ana argument, the name is typed w/o the parentheses so that the reference to the function is passed, not the value from invoking the function Anonymous functions can be passed as arguments as well (they are defined in the higher-order function's call) Adds another level of abstraction to a program to make it more modular & easier to read/debug JS functions are first class objects meaning that like other objects, JS functions can have properties and methods Functions are special b/c they can be invoked and treated like any other type of data Every JS function is actually a Function object ( Documentation )","title":"Higher-Order Functions"},{"location":"web_dev/js/basics/#iterators","text":"These iterators take a callback function as an argument and execute the callback function for each element in the array .forEach() const fruits = ['mango', 'papaya', 'pineapple', 'apple']; fruits.forEach(elem=>console.log(`I want to eat a ${elem}`)); //I want to eat a mango...papaya...etc. .map() returns a new array unlike forEach which mutates the original array const nums = [1,2,3,4]; const bigNums = nums.map(number => number * 10); //[10,20,30,40] .filter() takes a boolean callback function (returns T/F) as an argument. Returns a new array const favoriteWords = ['nostalgia', 'hyperbole', 'fervent', 'esoteric', 'serene']; const longFavoriteWords = favoriteWords.filter(elem=> { return elem.length > 7; }); .findIndex() Returns the index of the first element that evaluates to true in the boolean callback function No element that satisfies the callback returns -1 ``` javascript const jumbledNums = [123, 25, 78, 5, 9]; const lessThanTen = jumbledNums.findIndex(num => { return num < 10; }); //3 - `.reduce()` returns a single value after iterating through the elements of an array (Consists of an accumulator and iterator) - The optional 2nd argument sets the initial value for accumulator ```javascript const nums = [1,2,3,4]; const summedNums = nums.reduce((accumulator,currentVal) => { console.log('The value of accumulator: ', accumulator); console.log('The value of currentValue: ', currentValue); return accumulator + currentVal; },100); //110","title":"Iterators"},{"location":"web_dev/js/browser_compatibility/","text":"Browser Compatibility Some ES6 features, like modules, are still not supported by most web browsers caniuse.com is the bset resource for finding browser compatiblity info on a feature-by-feature basis ES5 updated to ES6: Better readability and requires fewer characters Fixes ES5 bugs common from the syntax Syntax more similar to other OOP languages Ecma (Organization in charge of JS standards) made ES6 backwards compatible meaning it can be mapped to ES5 Backwards compatibility helps decrease browser compatibility issues Babel is a library that transpiles ES6 to ES5 JavaScript Transpilation- the process of converting one programming language to another babel-cli - Node package w/ command line tools for Babel babel-preset-env - Node package w/ ES6+ to ES5 syntax mapping information Transpilation (Detailed Notes) Setup the project using the specified file structure and npm bash project |_ src |___ main.js |_ package.json Run npm init to create a package.json file in the root directory that contains info about the current project: Metdata- Project Title, Description, Authors, etc List of Required Node Packages- npm downloads the packages in this list when other developers want to run your project Key-value pairs for command line scripts- can use npm to run these shorthand scripts to perform some process Install necessary Babel packages using node package manager (npm) bash npm install babel-cli -D npm install babel-preset-env -D install creates a folder called node_modules and copies the package files to it while also installing all the dependencies for the given package -D flag instructs npm to add each package to a property called devDependencies in package.json devDependencies allows other developers to run your project without installing each package separately Instead they can run npm install to instruct npm to look inside package.json and download all the packages listed in devDependencies New Directory Structure: ( ... indicates 100+ packages that npm installed) bash project |_ node_modules |___ .bin |___ ... |_ src |___ main.js |_ package.json Specify the initial JS version in .babelrc Run touch .babelrc in the root directory to create the file Define the preset for the source JS file ( [\"env\"] insrtucts Babel to transpile any code from ES6+) { \"presets\": [\"env\"] } Specify a script in package.json that initiates ES6+ to ES5 transpilation In the \"scripts\" object, add a property called \"build\" below \"test\" \"build\" 's value ( babel src -d lib ) is a command line method that trasnpiles ES6+ code to ES5 babel \u2014 The Babel command call responsible for transpiling code. src \u2014 Instructs Babel to transpile all JavaScript code inside the src directory. -d \u2014 Instructs Babel to write the transpiled code to a directory. lib \u2014 Babel writes the transpiled code to a directory called lib . json ... \"scripts\": { \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\", \"build\": \"babel src -d lib\" }, ... Type npm run build to build the transpile the code to ES5 where it is stored in a directory called lib as a file with the same name as the original file (./lib/main.js) The command runs the build script in package.json The one command transpiles all code in src - good for larger projects with numerous JS files Transpilation Process (Summary): Initialize your project using npm init and create a directory called src Install babel dependencies by running npm install babel-cli -D npm install babel-preset-env -D Create a .babelrc file inside your project and add the following code inside it: { \"presets\": [\"env\"] } Add the following script to your scripts object in package.json: json \"build\": \"babel src -d lib\" Run npm run build whenever you want to transpile your code from your src to lib directories","title":"Browser Compatibility"},{"location":"web_dev/js/browser_compatibility/#browser-compatibility","text":"Some ES6 features, like modules, are still not supported by most web browsers caniuse.com is the bset resource for finding browser compatiblity info on a feature-by-feature basis ES5 updated to ES6: Better readability and requires fewer characters Fixes ES5 bugs common from the syntax Syntax more similar to other OOP languages Ecma (Organization in charge of JS standards) made ES6 backwards compatible meaning it can be mapped to ES5 Backwards compatibility helps decrease browser compatibility issues Babel is a library that transpiles ES6 to ES5 JavaScript Transpilation- the process of converting one programming language to another babel-cli - Node package w/ command line tools for Babel babel-preset-env - Node package w/ ES6+ to ES5 syntax mapping information","title":"Browser Compatibility"},{"location":"web_dev/js/browser_compatibility/#transpilation-detailed-notes","text":"Setup the project using the specified file structure and npm bash project |_ src |___ main.js |_ package.json Run npm init to create a package.json file in the root directory that contains info about the current project: Metdata- Project Title, Description, Authors, etc List of Required Node Packages- npm downloads the packages in this list when other developers want to run your project Key-value pairs for command line scripts- can use npm to run these shorthand scripts to perform some process Install necessary Babel packages using node package manager (npm) bash npm install babel-cli -D npm install babel-preset-env -D install creates a folder called node_modules and copies the package files to it while also installing all the dependencies for the given package -D flag instructs npm to add each package to a property called devDependencies in package.json devDependencies allows other developers to run your project without installing each package separately Instead they can run npm install to instruct npm to look inside package.json and download all the packages listed in devDependencies New Directory Structure: ( ... indicates 100+ packages that npm installed) bash project |_ node_modules |___ .bin |___ ... |_ src |___ main.js |_ package.json Specify the initial JS version in .babelrc Run touch .babelrc in the root directory to create the file Define the preset for the source JS file ( [\"env\"] insrtucts Babel to transpile any code from ES6+) { \"presets\": [\"env\"] } Specify a script in package.json that initiates ES6+ to ES5 transpilation In the \"scripts\" object, add a property called \"build\" below \"test\" \"build\" 's value ( babel src -d lib ) is a command line method that trasnpiles ES6+ code to ES5 babel \u2014 The Babel command call responsible for transpiling code. src \u2014 Instructs Babel to transpile all JavaScript code inside the src directory. -d \u2014 Instructs Babel to write the transpiled code to a directory. lib \u2014 Babel writes the transpiled code to a directory called lib . json ... \"scripts\": { \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\", \"build\": \"babel src -d lib\" }, ... Type npm run build to build the transpile the code to ES5 where it is stored in a directory called lib as a file with the same name as the original file (./lib/main.js) The command runs the build script in package.json The one command transpiles all code in src - good for larger projects with numerous JS files","title":"Transpilation (Detailed Notes)"},{"location":"web_dev/js/browser_compatibility/#transpilation-process-summary","text":"Initialize your project using npm init and create a directory called src Install babel dependencies by running npm install babel-cli -D npm install babel-preset-env -D Create a .babelrc file inside your project and add the following code inside it: { \"presets\": [\"env\"] } Add the following script to your scripts object in package.json: json \"build\": \"babel src -d lib\" Run npm run build whenever you want to transpile your code from your src to lib directories","title":"Transpilation Process (Summary):"},{"location":"web_dev/js/classes/","text":"Classes Constructor JavaScript calls the constructor() method every time it creates a new instance of a class. class Dog { constructor(name) { this.name = name; this.behavior = 0; } } Instances An instance is an object that contains the property names and methods of a class, but with unique property values. const halley = new Dog('Halley'); console.log(halley.name); // Output: 'Halley' Methods Class method and getter syntax is the same as it is for objects except you can not include commas between methods. class Dog { constructor(name) { this._name = name; } get name() { return this._name; } incrementBehavior() { this._behavior++; } } Static Methods aren't available to instances and can only be called by the class Calling static methods from an instance throws a TypeError class Animal { constructor(name) { this._name = name; this._behavior = 0; } static generateName() { const names = ['Angel', 'Spike', 'Buffy', 'Willow', 'Tara']; const randomNumber = Math.floor(Math.random()*5); return names[randomNumber]; } } console.log(Animal.generateName()); // returns a name Inheritance Create a parent class (also known as a superclass) with properties and methods that multiple child classes (also known as subclasses) share Child classes inherit the properties and methods from their parent class Benefits (time saved, readability, efficiency) grow as the number and size of subclasses increase Adheres to DRY best practice JS uses extends keyword to extend the properties/methods of one clas to a subclass super() Calls the constructor of the parent class (with the appropriate parameters if necessary) super() must always be called before this can be used to define new properties (ReferenceError will be thrown otherwise) Best Practice: Always call super() on the first line of subclass constructors class Animal { constructor(name) { this._name = name; this._behavior = 0; } get name() { return this._name; } get behavior() { return this._behavior; } } class Cat extends Animal { constructor(name, usesLitter) { super(name); this._usesLitter = usesLitter; } }","title":"Classes"},{"location":"web_dev/js/classes/#classes","text":"","title":"Classes"},{"location":"web_dev/js/classes/#constructor","text":"JavaScript calls the constructor() method every time it creates a new instance of a class. class Dog { constructor(name) { this.name = name; this.behavior = 0; } }","title":"Constructor"},{"location":"web_dev/js/classes/#instances","text":"An instance is an object that contains the property names and methods of a class, but with unique property values. const halley = new Dog('Halley'); console.log(halley.name); // Output: 'Halley'","title":"Instances"},{"location":"web_dev/js/classes/#methods","text":"Class method and getter syntax is the same as it is for objects except you can not include commas between methods. class Dog { constructor(name) { this._name = name; } get name() { return this._name; } incrementBehavior() { this._behavior++; } } Static Methods aren't available to instances and can only be called by the class Calling static methods from an instance throws a TypeError class Animal { constructor(name) { this._name = name; this._behavior = 0; } static generateName() { const names = ['Angel', 'Spike', 'Buffy', 'Willow', 'Tara']; const randomNumber = Math.floor(Math.random()*5); return names[randomNumber]; } } console.log(Animal.generateName()); // returns a name","title":"Methods"},{"location":"web_dev/js/classes/#inheritance","text":"Create a parent class (also known as a superclass) with properties and methods that multiple child classes (also known as subclasses) share Child classes inherit the properties and methods from their parent class Benefits (time saved, readability, efficiency) grow as the number and size of subclasses increase Adheres to DRY best practice JS uses extends keyword to extend the properties/methods of one clas to a subclass super() Calls the constructor of the parent class (with the appropriate parameters if necessary) super() must always be called before this can be used to define new properties (ReferenceError will be thrown otherwise) Best Practice: Always call super() on the first line of subclass constructors class Animal { constructor(name) { this._name = name; this._behavior = 0; } get name() { return this._name; } get behavior() { return this._behavior; } } class Cat extends Animal { constructor(name, usesLitter) { super(name); this._usesLitter = usesLitter; } }","title":"Inheritance"},{"location":"web_dev/js/jQuery/","text":"jQuery An easy to learn JS library that simplifies JS web programming Wraps common, lengthy tasks into methods that can be called in a single line Simplifies complicated JS things such as AJAX calls & DOM manipulation Contains Following Features: HTML/DOM manipulation CSS manipulation HTML event methods Effects and animations AJAX Utilities Many other plugins for other tasks Add to Webpages: Download production or development version from jQuery.com into project folder and add it to your project file <head> <script src=\"jquery-3.5.1.min.js\"></script> </head> OR include it from a CDN (Content Delivery Network) such as google: Loaded from users cache when they visit your site and it uses google's CDN (faster loading) <head> <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js\"></script> </head> Syntax Tailor-made for selecting HTML elements and performing some action on the element(s). Basic syntax is: $(selector).action() A $ sign to define/access jQuery A (selector) to \"query (or find)\" HTML elements A jQuery action() to be performed on the element(s) Document Ready Event All jQuery methods are inside a document ready event to prevent any jQuery code from running before the document is finished loading (is ready) Actions on the DOM can fail if document is fully loaded before code is executed $(document).ready(function(){ // jQuery methods go here.. }); //or the shorter version: $(function(){ // jQuery methods go here... }); Selectors Allow you to select and manipulate HTML elements Used to \"find\" (or select) HTML elements based on their name, id, classes, types, attributes, values of attributes and much more. Based on the existing CSS Selectors andit has some own custom selectors Element: $(\"p\") Id: $(#ex_id) Class: $(\".ex_class\")","title":"jQuery"},{"location":"web_dev/js/jQuery/#jquery","text":"An easy to learn JS library that simplifies JS web programming Wraps common, lengthy tasks into methods that can be called in a single line Simplifies complicated JS things such as AJAX calls & DOM manipulation Contains Following Features: HTML/DOM manipulation CSS manipulation HTML event methods Effects and animations AJAX Utilities Many other plugins for other tasks","title":"jQuery"},{"location":"web_dev/js/jQuery/#add-to-webpages","text":"Download production or development version from jQuery.com into project folder and add it to your project file <head> <script src=\"jquery-3.5.1.min.js\"></script> </head> OR include it from a CDN (Content Delivery Network) such as google: Loaded from users cache when they visit your site and it uses google's CDN (faster loading) <head> <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js\"></script> </head>","title":"Add to Webpages:"},{"location":"web_dev/js/jQuery/#syntax","text":"Tailor-made for selecting HTML elements and performing some action on the element(s). Basic syntax is: $(selector).action() A $ sign to define/access jQuery A (selector) to \"query (or find)\" HTML elements A jQuery action() to be performed on the element(s)","title":"Syntax"},{"location":"web_dev/js/jQuery/#document-ready-event","text":"All jQuery methods are inside a document ready event to prevent any jQuery code from running before the document is finished loading (is ready) Actions on the DOM can fail if document is fully loaded before code is executed $(document).ready(function(){ // jQuery methods go here.. }); //or the shorter version: $(function(){ // jQuery methods go here... });","title":"Document Ready Event"},{"location":"web_dev/js/jQuery/#selectors","text":"Allow you to select and manipulate HTML elements Used to \"find\" (or select) HTML elements based on their name, id, classes, types, attributes, values of attributes and much more. Based on the existing CSS Selectors andit has some own custom selectors Element: $(\"p\") Id: $(#ex_id) Class: $(\".ex_class\")","title":"Selectors"},{"location":"web_dev/js/modules/","text":"Modules Overview Reusable pieces of code that can be exported from one program and imported for use in another program Benefits of Using Modules: Find, fix, and debug code more easily Reuse and recycle logic defined in different parts of our application Keep information private and protected from other modules Prevent pollution of the global namespace and potential naming collisions, by cautiously selecting variables and behavior we load into a program Two Ways of Implementing Modules: Node.js's module.exports and require() syntax ES6 import / export syntax Node.js Syntax module.exports Every JavaScript file run in Node has a local module object with an exports property used to define what should be exported from the file The pattern we use to export modules: Create an object to represent the module. Add properties or methods to the module object. Export the module with module.exports . let Menu = {}; Menu.specialty = \"Roasted Beet Burger with Mint Sauce\"; module.exports = Menu; Can also wrap any collection of data/functions in an object and export the object (Equivalent to above block) module.exports = { specialty: \"Roasted Beet Burger with Mint Sauce\", getSpecialty: function() { return this.specialty; } }; require() Used in Node to import the exported module into another file so its defined behavior can be used Takes a file path argument pointing to the original module file The .js extension in the file path is optional and will be assumed if not included The pattern to import a module: Import the module with require() and assign it to a local variable. Use the module and its properties within a program. const Menu = require('./menu.js'); function placeOrder() { console.log('My order is: ' + Menu.specialty); } placeOrder(); ES6 Syntax export default Works similarly to the module.exports syntax, allowing us to export 1 module per file Not supported in Node.js so this syntax is used for front-end development let Menu = {}; export default Menu; import The name following import specifies the name of the variable to store the default export in When specifying the path name after from , .js is left off because it specifically refers to the name of the file w/o the extension of the file when dealing with local files import Menu from './menu'; Named Exports Allow us to export data through the use of variables let specialty = ''; function isVegetarian() {}; export { specialty, isVegetarian }; Named exports can have their name changed when exported using as let specialty = ''; let isVegetarian = function() {}; export { specialty as chefsSpecial, isVegetarian as isVeg }; Variables can be exported as soon as they are declared by placing export in front of variable declarations export let specialty = ''; export function isVegetarian() {}; Named exports and default exports can be used together Best not to use both methods but can occasionally be useful Ex: If you suspect developers may only be interested in importing a specific function and won\u2019t need to import the entire default export. let specialty = ''; function isVegetarian() {}; function isGlutenFree() {}; export { specialty as chefsSpecial, isVegetarian as isVeg }; export default isGlutenFree; Named Imports To import objects stored in a variable, we use the import keyword and include the variables in a set of {} Don't have to import all the variables exported in the other module import { specialty, isVegetarian } from './menu'; console.log(specialty); Named exports can have their name changed when exported/imported using as import {speciality as chefsSpecial, isVegetarian as isVeg} from './menu'; //or import * as Carte from './menu'; Carte.speciality; Carte.isVegetarian(); Named imports and normal imports can be used together import { specialty, isVegetarian } from './menu'; import GlutenFree from './menu';","title":"Modules"},{"location":"web_dev/js/modules/#modules-overview","text":"Reusable pieces of code that can be exported from one program and imported for use in another program Benefits of Using Modules: Find, fix, and debug code more easily Reuse and recycle logic defined in different parts of our application Keep information private and protected from other modules Prevent pollution of the global namespace and potential naming collisions, by cautiously selecting variables and behavior we load into a program Two Ways of Implementing Modules: Node.js's module.exports and require() syntax ES6 import / export syntax","title":"Modules Overview"},{"location":"web_dev/js/modules/#nodejs-syntax","text":"","title":"Node.js Syntax"},{"location":"web_dev/js/modules/#moduleexports","text":"Every JavaScript file run in Node has a local module object with an exports property used to define what should be exported from the file The pattern we use to export modules: Create an object to represent the module. Add properties or methods to the module object. Export the module with module.exports . let Menu = {}; Menu.specialty = \"Roasted Beet Burger with Mint Sauce\"; module.exports = Menu; Can also wrap any collection of data/functions in an object and export the object (Equivalent to above block) module.exports = { specialty: \"Roasted Beet Burger with Mint Sauce\", getSpecialty: function() { return this.specialty; } };","title":"module.exports"},{"location":"web_dev/js/modules/#require","text":"Used in Node to import the exported module into another file so its defined behavior can be used Takes a file path argument pointing to the original module file The .js extension in the file path is optional and will be assumed if not included The pattern to import a module: Import the module with require() and assign it to a local variable. Use the module and its properties within a program. const Menu = require('./menu.js'); function placeOrder() { console.log('My order is: ' + Menu.specialty); } placeOrder();","title":"require()"},{"location":"web_dev/js/modules/#es6-syntax","text":"","title":"ES6 Syntax"},{"location":"web_dev/js/modules/#export-default","text":"Works similarly to the module.exports syntax, allowing us to export 1 module per file Not supported in Node.js so this syntax is used for front-end development let Menu = {}; export default Menu;","title":"export default"},{"location":"web_dev/js/modules/#import","text":"The name following import specifies the name of the variable to store the default export in When specifying the path name after from , .js is left off because it specifically refers to the name of the file w/o the extension of the file when dealing with local files import Menu from './menu';","title":"import"},{"location":"web_dev/js/modules/#named-exports","text":"Allow us to export data through the use of variables let specialty = ''; function isVegetarian() {}; export { specialty, isVegetarian }; Named exports can have their name changed when exported using as let specialty = ''; let isVegetarian = function() {}; export { specialty as chefsSpecial, isVegetarian as isVeg }; Variables can be exported as soon as they are declared by placing export in front of variable declarations export let specialty = ''; export function isVegetarian() {}; Named exports and default exports can be used together Best not to use both methods but can occasionally be useful Ex: If you suspect developers may only be interested in importing a specific function and won\u2019t need to import the entire default export. let specialty = ''; function isVegetarian() {}; function isGlutenFree() {}; export { specialty as chefsSpecial, isVegetarian as isVeg }; export default isGlutenFree;","title":"Named Exports"},{"location":"web_dev/js/modules/#named-imports","text":"To import objects stored in a variable, we use the import keyword and include the variables in a set of {} Don't have to import all the variables exported in the other module import { specialty, isVegetarian } from './menu'; console.log(specialty); Named exports can have their name changed when exported/imported using as import {speciality as chefsSpecial, isVegetarian as isVeg} from './menu'; //or import * as Carte from './menu'; Carte.speciality; Carte.isVegetarian(); Named imports and normal imports can be used together import { specialty, isVegetarian } from './menu'; import GlutenFree from './menu';","title":"Named Imports"},{"location":"web_dev/js/objects/","text":"Objects Are passed by reference meaning the variable assigned to an object points to the space in memory holding the object when passed into a function as an argument Functions that change object properties actually mutate the object permanently even when assigned to a const variable Can be iterated through using the for...in syntax that executes a given block of code for each property in an object ( Documentation ) for (let member in spaceship.crew) {} Object Literal Data is organized into key-value pairs where a key points to a location in memory that holds a value Keys are strings but values can be any data type When the keys don't have special characters, JS allows the quotation marks to be omitted Key serves as a method's name and the value is an anonymous function expression ES6 syntax allows omission of the colon and function keyword let person = { firstName: 'John', secondName: 'Doe', age: 30, children: ['Bob','Joe'] //Embedded Object address : { street: '555 Heaven Ave', city: 'Boston', state: 'MA' }, fullName: function(){ return this.firstname + ' ' + this.lastName; } //Same as fullName2 () { console.log(this.firstname) } } There are 2 notations used for accessing object properties: dot and bracket Braket notation must be used when accessing keys that have numbers, spaces, or special characters Also used for property assignment/creation Can't reassign an object declared with const delete operator is used to delete properties //Dot Notation person.age; person.children[0]; person.address.street; //Bracket Notation property = 'age'; person[property]; person['children'][0]; person['address']['street']; Object Constructor let apple = new Object(); apple.color = 'red'; apple.shape = 'round'; apple.describe = function(){ return \"Color: \" +this.color+' Shape: '+this.shape; } Constructor Pattern: function Fruit(name,color,shape){ this.name = name; this.color = color; this.shape = shape; this.describe = function(){ return \"This is \"+this.color; } } let apple = new Fruit('apple','red','round'); this Keyword Similar functionality to self keyword used for clases in python Used to reference other properties/methods of an object from within the object this references the calling object which provides access to the calling object's properties A ReferenceError is thrown if this is not used const goat = { dietType: 'herbivore', diet() { console.log(this.dietType); } }; goat.diet(); //Output: herbivore arrow functions bind/tie this to the function itself, not the calling object In the below example, the value of this is the global object (an object that exists in the global scope), which doesn't have a dietType property, therefore returnining undefined Avoid using arrow functions when using this in a method const goat = { dietType: 'herbivore', diet: () => { console.log(this.dietType); } }; goat.diet(); // Prints undefined Privacy Only certain properties should be mutable/able to change in value JS does not have privacy built-in for objects Naming conventions indicate how a developer should interact with a property Underscores _ before the name of a property: do not alter Getters are used to return internal properties of an object Syntax: get keyword followed by a function(){} Can perform an action on the data when getting a property Can return different values using conditionals Easier readability const person = { _firstName: 'John', _lastName: 'Doe', get fullName() { if (this._firstName && this._lastName){ return `${this._firstName} ${this._lastName}`; } else { return 'Missing a first name or a last name.'; } } } //Using a Getter person.fullName; // 'John Doe' Setters are used to reassign values of an object's properties const person = { _age: 37, set age(newAge){ if (typeof newAge === 'number'){ this._age = newAge; } else { console.log('You must assign a number to age'); } } }; //Using a Setter person.age = 40 console.log(person._age) //40 Factory Functions Returns an object that can be reused to make multiple object instances Simply returns an object Can have parameters allowing customization of the returned object const monsterFactory = (name, age, energySource, catchPhrase) => { return { name: name, age: age, energySource: energySource, scare() { console.log(catchPhrase); } } }; const ghost = monsterFactory('Ghouly', 251, 'ectoplasm', 'BOO!'); ghost.scare(); // 'BOO!' Destructuring An ES6 shortcut for assigning an object's properties to variables Property Value Shorthand can be used in creating factory functions where the property's name is the same as the variable it is being assigned to const monsterFactory = (name, age) => { return { name, age } }; Destructured Assignment is similar to unpacking in python where an object's properties can be concisely assigned to new variables const vampire = { name: 'Dracula', residence: 'Transylvania', preferences: { day: 'stay inside', night: 'satisfy appetite' } }; const {residence} = vampire; //Transylvania const {day} = vampire.preferences //Stay inside Built-In Object Methods Object Instance Methods: (Documentation) .hasOwnProperty() , .valueOf() Object Class Methods: Object.keys(name_of_obj) : Returns an array of the keys/property names of an object Object.entries(name_of_obj) : Returns an array containing arrays that have the key & value for each property Object.assign(target_obj,src_object) : Copies properties from the source object (s) to the target object and returns the target object","title":"Objects"},{"location":"web_dev/js/objects/#objects","text":"Are passed by reference meaning the variable assigned to an object points to the space in memory holding the object when passed into a function as an argument Functions that change object properties actually mutate the object permanently even when assigned to a const variable Can be iterated through using the for...in syntax that executes a given block of code for each property in an object ( Documentation ) for (let member in spaceship.crew) {}","title":"Objects"},{"location":"web_dev/js/objects/#object-literal","text":"Data is organized into key-value pairs where a key points to a location in memory that holds a value Keys are strings but values can be any data type When the keys don't have special characters, JS allows the quotation marks to be omitted Key serves as a method's name and the value is an anonymous function expression ES6 syntax allows omission of the colon and function keyword let person = { firstName: 'John', secondName: 'Doe', age: 30, children: ['Bob','Joe'] //Embedded Object address : { street: '555 Heaven Ave', city: 'Boston', state: 'MA' }, fullName: function(){ return this.firstname + ' ' + this.lastName; } //Same as fullName2 () { console.log(this.firstname) } } There are 2 notations used for accessing object properties: dot and bracket Braket notation must be used when accessing keys that have numbers, spaces, or special characters Also used for property assignment/creation Can't reassign an object declared with const delete operator is used to delete properties //Dot Notation person.age; person.children[0]; person.address.street; //Bracket Notation property = 'age'; person[property]; person['children'][0]; person['address']['street'];","title":"Object Literal"},{"location":"web_dev/js/objects/#object-constructor","text":"let apple = new Object(); apple.color = 'red'; apple.shape = 'round'; apple.describe = function(){ return \"Color: \" +this.color+' Shape: '+this.shape; }","title":"Object Constructor"},{"location":"web_dev/js/objects/#constructor-pattern","text":"function Fruit(name,color,shape){ this.name = name; this.color = color; this.shape = shape; this.describe = function(){ return \"This is \"+this.color; } } let apple = new Fruit('apple','red','round');","title":"Constructor Pattern:"},{"location":"web_dev/js/objects/#this-keyword","text":"Similar functionality to self keyword used for clases in python Used to reference other properties/methods of an object from within the object this references the calling object which provides access to the calling object's properties A ReferenceError is thrown if this is not used const goat = { dietType: 'herbivore', diet() { console.log(this.dietType); } }; goat.diet(); //Output: herbivore arrow functions bind/tie this to the function itself, not the calling object In the below example, the value of this is the global object (an object that exists in the global scope), which doesn't have a dietType property, therefore returnining undefined Avoid using arrow functions when using this in a method const goat = { dietType: 'herbivore', diet: () => { console.log(this.dietType); } }; goat.diet(); // Prints undefined","title":"this Keyword"},{"location":"web_dev/js/objects/#privacy","text":"Only certain properties should be mutable/able to change in value JS does not have privacy built-in for objects Naming conventions indicate how a developer should interact with a property Underscores _ before the name of a property: do not alter Getters are used to return internal properties of an object Syntax: get keyword followed by a function(){} Can perform an action on the data when getting a property Can return different values using conditionals Easier readability const person = { _firstName: 'John', _lastName: 'Doe', get fullName() { if (this._firstName && this._lastName){ return `${this._firstName} ${this._lastName}`; } else { return 'Missing a first name or a last name.'; } } } //Using a Getter person.fullName; // 'John Doe' Setters are used to reassign values of an object's properties const person = { _age: 37, set age(newAge){ if (typeof newAge === 'number'){ this._age = newAge; } else { console.log('You must assign a number to age'); } } }; //Using a Setter person.age = 40 console.log(person._age) //40","title":"Privacy"},{"location":"web_dev/js/objects/#factory-functions","text":"Returns an object that can be reused to make multiple object instances Simply returns an object Can have parameters allowing customization of the returned object const monsterFactory = (name, age, energySource, catchPhrase) => { return { name: name, age: age, energySource: energySource, scare() { console.log(catchPhrase); } } }; const ghost = monsterFactory('Ghouly', 251, 'ectoplasm', 'BOO!'); ghost.scare(); // 'BOO!'","title":"Factory Functions"},{"location":"web_dev/js/objects/#destructuring","text":"An ES6 shortcut for assigning an object's properties to variables Property Value Shorthand can be used in creating factory functions where the property's name is the same as the variable it is being assigned to const monsterFactory = (name, age) => { return { name, age } }; Destructured Assignment is similar to unpacking in python where an object's properties can be concisely assigned to new variables const vampire = { name: 'Dracula', residence: 'Transylvania', preferences: { day: 'stay inside', night: 'satisfy appetite' } }; const {residence} = vampire; //Transylvania const {day} = vampire.preferences //Stay inside","title":"Destructuring"},{"location":"web_dev/js/objects/#built-in-object-methods","text":"Object Instance Methods: (Documentation) .hasOwnProperty() , .valueOf() Object Class Methods: Object.keys(name_of_obj) : Returns an array of the keys/property names of an object Object.entries(name_of_obj) : Returns an array containing arrays that have the key & value for each property Object.assign(target_obj,src_object) : Copies properties from the source object (s) to the target object and returns the target object","title":"Built-In Object Methods"},{"location":"web_dev/js/promises/","text":"Ayscnhronous Programming An asynchronous operation is one that allows the computer to \u201cmove on\u201d to other tasks while waiting for the asynchronous operation to complete Asynchronous programming means that time-consuming operations don\u2019t have to bring everything else in our programs to a halt JS handles asynchronicity using the Promise object, introduced with ES6 What is a Promise? Promises are objects that represent the eventual outcome of an asynchronous operation A Promise object can be in one of three states: Pending : The initial state\u2014 the operation has not completed yet. Fulfilled : The operation has completed successfully and the promise now has a resolved value . For example, a request\u2019s promise might resolve with a JSON object as its value. Rejected : The operation has failed and the promise has a reason for the failure. This reason is usually an Error of some kind. A promise is settled if it is no longer pending (it is either fufilled or rejected) All promises eventually settle Enables us to write logic for what to do if the promise fulfills or is rejected Promises are returned from a asyncrhonous operations Constructing a Promise Object Promise constructor takes a function called the executor function as an argument Executor Function runs automatically when constructor is called, generally starts an asynchronous operation, and dictates how the promsie should be settled Has 2 function parameters: resolve() and reject() (These functions aren't defined by the progammer but are rather passed by JS into the executor function when the Promise constructor runs) resolve has one argument and will change the promise's status from pending to fulfilled if invoked and will set the resolved value to the argument passed in reject takes a reason or error as an argument and will change the promise's status from pending to rejected if invoked and will set the rejection's reason to the argument passed in Promises settle based on the results of an asynch operation (e.g. Database request is fulfilled with data from the query or is rejected with an error thrown) const executorFunction = (resolve,reject) => { if (condition){ resolve('Say Something') } else { reject('Say a different thing') } } const myPromise = new Promise(executorFunction) setTimeout() in Node: Takes a callback function and delay in milliseconds as arguments The callback function will execute in at least the passed in delay (Could be longer) This happens b/c after the delay, the line of code is added to be run but any synchronous code from the program will run before it, possibly delaying the callback functions execution","title":"Promises"},{"location":"web_dev/js/promises/#ayscnhronous-programming","text":"An asynchronous operation is one that allows the computer to \u201cmove on\u201d to other tasks while waiting for the asynchronous operation to complete Asynchronous programming means that time-consuming operations don\u2019t have to bring everything else in our programs to a halt JS handles asynchronicity using the Promise object, introduced with ES6","title":"Ayscnhronous Programming"},{"location":"web_dev/js/promises/#what-is-a-promise","text":"Promises are objects that represent the eventual outcome of an asynchronous operation A Promise object can be in one of three states: Pending : The initial state\u2014 the operation has not completed yet. Fulfilled : The operation has completed successfully and the promise now has a resolved value . For example, a request\u2019s promise might resolve with a JSON object as its value. Rejected : The operation has failed and the promise has a reason for the failure. This reason is usually an Error of some kind. A promise is settled if it is no longer pending (it is either fufilled or rejected) All promises eventually settle Enables us to write logic for what to do if the promise fulfills or is rejected Promises are returned from a asyncrhonous operations","title":"What is a Promise?"},{"location":"web_dev/js/promises/#constructing-a-promise-object","text":"Promise constructor takes a function called the executor function as an argument Executor Function runs automatically when constructor is called, generally starts an asynchronous operation, and dictates how the promsie should be settled Has 2 function parameters: resolve() and reject() (These functions aren't defined by the progammer but are rather passed by JS into the executor function when the Promise constructor runs) resolve has one argument and will change the promise's status from pending to fulfilled if invoked and will set the resolved value to the argument passed in reject takes a reason or error as an argument and will change the promise's status from pending to rejected if invoked and will set the rejection's reason to the argument passed in Promises settle based on the results of an asynch operation (e.g. Database request is fulfilled with data from the query or is rejected with an error thrown) const executorFunction = (resolve,reject) => { if (condition){ resolve('Say Something') } else { reject('Say a different thing') } } const myPromise = new Promise(executorFunction)","title":"Constructing a Promise Object"},{"location":"web_dev/js/promises/#settimeout-in-node","text":"Takes a callback function and delay in milliseconds as arguments The callback function will execute in at least the passed in delay (Could be longer) This happens b/c after the delay, the line of code is added to be run but any synchronous code from the program will run before it, possibly delaying the callback functions execution","title":"setTimeout() in Node:"},{"location":"web_dev/js/using_node_pkgs/","text":"Using Node Packages in a Project Initialize the project with npm init Install the desired packages with npm i package -D flag (Shorthand for --save-dev ) is used to save packages for necessary for development purposes (e.g. unit tests, minification, etc. ) Saves the package to \"devDependencies\" in package.json -S flag (Shorthand for --save) is used to save packages required for the application to run Saves them to \"dependencies\" in package.json Automatically saves new packages in npm 5+ Edit the \"scripts\" object in package.json to include necessary commands Run the scripts using npm run script_name Scripts: Sass (CSS Pre-Compiler): node-sass package should be saved to devDependencies \"sass\": \"node-sass -w scss/ -o dist/css/ --recursive\" Command watches (-w) the scss folder and outputs (-o) the compiled css to the css folder in the dist directory --recursive prevets issues with partials and auto-reloading Jest (JS Testing Framework): jest package should be saved to devDependencies \"test\": \"jest\" Babel (ES6+ to ES5 Transpilation): babel-cli and babel-preset-env packes should be saved to devDependencies \"build\": \"babel src -d lib\"","title":"Node Pkgs"},{"location":"web_dev/js/using_node_pkgs/#using-node-packages-in-a-project","text":"Initialize the project with npm init Install the desired packages with npm i package -D flag (Shorthand for --save-dev ) is used to save packages for necessary for development purposes (e.g. unit tests, minification, etc. ) Saves the package to \"devDependencies\" in package.json -S flag (Shorthand for --save) is used to save packages required for the application to run Saves them to \"dependencies\" in package.json Automatically saves new packages in npm 5+ Edit the \"scripts\" object in package.json to include necessary commands Run the scripts using npm run script_name","title":"Using Node Packages in a Project"},{"location":"web_dev/js/using_node_pkgs/#scripts","text":"","title":"Scripts:"},{"location":"web_dev/js/using_node_pkgs/#sass-css-pre-compiler","text":"node-sass package should be saved to devDependencies \"sass\": \"node-sass -w scss/ -o dist/css/ --recursive\" Command watches (-w) the scss folder and outputs (-o) the compiled css to the css folder in the dist directory --recursive prevets issues with partials and auto-reloading","title":"Sass (CSS Pre-Compiler):"},{"location":"web_dev/js/using_node_pkgs/#jest-js-testing-framework","text":"jest package should be saved to devDependencies \"test\": \"jest\"","title":"Jest (JS Testing Framework):"},{"location":"web_dev/js/using_node_pkgs/#babel-es6-to-es5-transpilation","text":"babel-cli and babel-preset-env packes should be saved to devDependencies \"build\": \"babel src -d lib\"","title":"Babel (ES6+ to ES5 Transpilation):"}]}